#     ██
#    ░░
#     ██  ██████   ██    ██  ██████
#    ░██ ░░░░░░██ ░██   ░██ ░░░░░░██
#    ░██  ███████ ░░██ ░██   ███████
#  ██░██ ██░░░░██  ░░████   ██░░░░██
# ░░███ ░░████████  ░░██   ░░████████
#  ░░░   ░░░░░░░░    ░░     ░░░░░░░░
# snippets

# main method
snippet !psvm
public static void
main(String... args)
{
$0
}
endsnippet

# print
snippet !print
System.out.println(${0:foo});
endsnippet

# printf
snippet !printf
System.out.printf("${1:foo}%n", ${0:args});
endsnippet

# scanner
snippet !scanner
import java.util.Scanner;
private static final Scanner scanf = new Scanner(System.in);
endsnippet

# scan
snippet !scan
${1:Type}.parse${2:Type}(${3:scanner}.nextLine());
endsnippet

# constant
snippet !const
${1:public} static final ${2:type} ${3:foo} = $4; $0
endsnippet

# for loop
snippet !for
for (int ${1:i} = 0; $1 < ${2:lenght}; ++$1) {
    $0
}
endsnippet

# for-each loop
snippet !foreach
for ($1 : $2) {
    $0
}
endsnippet

# while loop
snippet !while
while (${1:condition}) {
    $0
}
endsnippet

# do-while loop
snippet !dowhile
do {
    $0
} while (${1:condition});

endsnippet

# switch
snippet !switch
switch ($1) {
case $2:
    $0
    break;
default:
    break;
}
endsnippet

# ternary operator
snippet !ternary
(${1:condition}) ? $2 : $3;$0
endsnippet

# try-catch
snippet !tcatch
try {
    $1${VISUAL}
} catch(${2:Exception} ${3:ex}) {
    ${4:ex.printStackTrace();}
}
endsnippet

# try-catch sleep
snippet !sleep
try {
    Thread.sleep(${1:time});
} catch (InterruptedException ex) {
    ex.printStackTrace();
}
endsnippet

# setters & getters
snippet !sgetter
public void
set${1:Atribute}(${2:type} `!p snip.rv = mixedCase(t[1])`)
{
    this.`!p snip.rv = mixedCase(t[1])` = `!p snip.rv = mixedCase(t[1])`;
}`!p snip.rv += "\n"`
public $2
get$1()
{
    return `!p snip.rv = mixedCase(t[1])`;
}
endsnippet

# document header
snippet !doc
/**
 *
 * @author $0
 */
endsnippet

# -----------------------------------------------------------------------------
# globals
# -----------------------------------------------------------------------------
global !p
def mixedCase(word):
    if not word: return ''
    return word[0].lower() + word[1:]
endglobal
