#+title: annt's Emacs'
#+author: anntnzrb
#+email: anntnzrb@protonmail.com
#+property: header-args :results silent

# macros
#+macro: export-date   (eval (format-time-string "%F" (current-time)))
#+macro: emacs-version (eval (substring (emacs-version) 10 17))

- created: 2020-11-07
- updated: *{{{export-date}}}*
- GNU Emacs version: *{{{emacs-version}}}*

* table of contents                                          :TOC_3:noexport:
- [[#core-settings][core settings]]
  - [[#initialization-files][initialization files]]
    - [[#early-initel][=early-init.el=]]
    - [[#initel][=init.el=]]
  - [[#header][header]]
  - [[#helpers][helpers]]
  - [[#package-management][package management]]
    - [[#straightel][~straight.el~]]
  - [[#performance][performance]]
    - [[#garbage-collector][garbage collector]]
    - [[#amount-of-procesed-data][amount of procesed data]]
    - [[#extra-resources][extra resources]]
  - [[#generals][generals]]
    - [[#custom-custom-file][custom custom file]]
    - [[#editing][editing]]
    - [[#vi-emulation][Vi emulation]]
    - [[#mouse--cursor][mouse & cursor]]
  - [[#appearance][appearance]]
    - [[#fonts][fonts]]
    - [[#themes][themes]]
    - [[#modeline][modeline]]
    - [[#tooltips][tooltips]]
- [[#dired][dired]]
- [[#programming][programming]]
  - [[#keybinds][keybinds]]
  - [[#tools][tools]]
  - [[#shell][shell]]
  - [[#c-like][C-like]]
    - [[#c][C]]
  - [[#lispy][Lispy]]
    - [[#emacs-lisp-elisp][Emacs Lisp (Elisp)]]
    - [[#racket][Racket]]
  - [[#nix][Nix]]
- [[#version-control][version control]]
- [[#applications--utilities][applications & utilities]]
  - [[#completion][completion]]
    - [[#syntax-checking][syntax checking]]
    - [[#snippets][snippets]]
  - [[#org][org]]

* core settings

** initialization files

*** =early-init.el=

Emacs =27.1= offers new file called =early-init.el= which allows customizations
that take effect during Emacs startup earlier than the normal init file. This
file is loaded before the package system and GUI is initialized.

-  references
  - [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html][The Early Init File]]

#+begin_src emacs-lisp :tangle "early-init.el"
;;; early-init.el --- GNU Emacs >= 27.1 pre-initialization file -*- lexical-binding: t -*-

;;; Commentary:

;; This file gets loaded before the 'init.el' file.
;; Should not have more than a few files.

;;; Code:

;; package tweaks
(setq package-enable-at-startup nil) ;; needed by `straight.el'

;; don't frame-resize this early
(setq frame-inhibit-implied-resize t)

;; GUI
(menu-bar-mode   0)
(scroll-bar-mode 0)
(setq inhibit-splash-screen  t)
(setq inhibit-startup-screen t)

(provide 'early-init)

;;; early-init.el ends here
#+end_src

*** =init.el=

this file should be present anyways but adding here makes it easier to manage.

#+begin_src emacs-lisp :tangle "init.el"
;;; init.el --- Initialization file of GNU Emacs -*- lexical-binding: t; -*-

;;; Commentary:
;; This file gets loaded after the 'early-init.el' file.

;;; Code:

(org-babel-load-file (expand-file-name "readme.org" user-emacs-directory))

(provide 'init)
;;; init.el ends here
#+end_src

** header

=lexical-binding= should make /Emacs/ a tiny bit faster

#+begin_src emacs-lisp
;;; readme.org --- annt's GNU Emacs configuration file -*- lexical-binding: t -*-

;;; Commentary:

;; This file contains my personal configuration

;;; Code:
#+end_src

** helpers

this helpers functions & macros were yoinked from the [[https://github.com/hlissner/doom-emacs][Doom Emacs]]' source code,
all credit goes to their contributors as i only partially edited them to fit my
needs.

| [[https://github.com/hlissner/doom-emacs/blob/8424e0a780534de89f44dbe5b5e90f6b77fffdee/core/core-lib.el#L333-L378][after!]] | allows lazy loading packages like the =:defer= keyword in =use-package= |

#+begin_src emacs-lisp
(defmacro after! (package &rest body)
  "Evaluate BODY after PACKAGE have loaded.
PACKAGE is a symbol or list of them. These are package names, not modes,
functions or variables. It can be:
- An unquoted package symbol (the name of a package)
    (after! helm BODY...)
- An unquoted list of package symbols (i.e. BODY is evaluated once both magit
  and git-gutter have loaded)
    (after! (magit git-gutter) BODY...)
- An unquoted, nested list of compound package lists, using any combination of
  :or/:any and :and/:all
    (after! (:or package-a package-b ...)  BODY...)
    (after! (:and package-a package-b ...) BODY...)
    (after! (:and package-a (:or package-b package-c) ...) BODY...)
  Without :or/:any/:and/:all, :and/:all are implied.
This is a wrapper around `eval-after-load' that:
1. Suppresses warnings for disabled packages at compile-time
3. Supports compound package statements (see below)
4. Prevents eager expansion pulling in autoloaded macros all at once"
  (declare (indent defun) (debug t))
  (if (symbolp package)
      (list (if (or (not (bound-and-true-p byte-compile-current-file))
                    (require package nil 'noerror))
                #'progn
              #'with-no-warnings)
            ;; We intentionally avoid `with-eval-after-load' to prevent eager
            ;; macro expansion from pulling (or failing to pull) in autoloaded
            ;; macros/packages.
            `(eval-after-load ',package ',(macroexp-progn body)))
    (let ((p (car package)))
      (cond ((not (keywordp p))
             `(after! (:and ,@package) ,@body))
            ((memq p '(:or :any))
             (macroexp-progn
              (cl-loop for next in (cdr package)
                       collect `(after! ,next ,@body))))
            ((memq p '(:and :all))
             (dolist (next (cdr package))
               (setq body `((after! ,next ,@body))))
             (car body))))))
#+end_src

** package management

*** ~straight.el~

| [[https://github.com/raxod502/straight.el][straight.el]] | purely functional package manager |

a few reasons why i consider =straight.el=:

- functional
- reproducible package management
- packages cloned as /Git/ repos
- ability to provide own recipes
- =package.el= loads every package meanwhile =straight.el= only loads whatever
  is specifically stated on the init file

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(setq straight-repository-branch "master")
#+end_src

** performance

*** garbage collector

[[https://emacs.stackexchange.com/a/34367][... setting `gc-cons-threshold` very high and collecting garbage when idle?]]

#+begin_src emacs-lisp
(setq gc-cons-threshold-orig gc-cons-threshold
      gc-cons-threshold      (* 1024 1024 100)
      file-name-handler-alist-orig file-name-handler-alist
      file-name-handler-alist      nil)

(run-with-idle-timer
 5 nil
 (lambda ()
   (setq gc-cons-threshold       gc-cons-threshold-orig
         file-name-handler-alist file-name-handler-alist-orig)
   (makunbound 'gc-cons-threshold-orig)
   (makunbound 'file-name-handler-alist-orig)))
#+end_src

*** amount of procesed data

[[https://emacs-lsp.github.io/lsp-mode/page/performance/][LSP :: Performance Guide]]

#+begin_src emacs-lisp
(setq read-process-output-max (* 1024 1024))
#+end_src

*** extra resources

a list of useful posts regarding gnu emacs performance.

- [[https://blog.d46.us/advanced-emacs-startup/][Advanced Techniques for Reducing Emacs Startup Time]]

** generals

settings that do not belong anywhere specific.

#+begin_src emacs-lisp
;; backup
(setq create-lockfiles  nil)
(setq make-backup-files nil)

(setq visible-bell t)
(setq use-short-answers t)

(add-hook 'after-init-hook #'toggle-frame-maximized)
#+end_src

*** custom custom file

if you adjust settings directly from /Emacs/ (GUI), some Elisp code will be
appended to the =init.el= file, this can be a bit messy; this can be adjusted
to use another file and accomplish this.

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+end_src

*** editing

#+begin_src emacs-lisp
(setq mode-require-final-newline t)
(setq-default tab-width                    4)
(setq-default indent-tabs-mode           nil)
(setq-default show-trailing-whitespace     t)
(setq-default fill-column                 79)
(setq-default display-line-numbers 'relative)
(setq-default display-fill-column-indicator-column (+ fill-column 1))

;; display vertical column at line limit
(global-display-fill-column-indicator-mode)
(global-hl-line-mode) ;; line highlighting

;; auto-wrapping
(dolist (hooks '(prog-mode-hook text-mode-hook))
  (add-hook hooks #'auto-fill-mode))

;; delete trailing whitespaces prior saving
(add-hook 'before-save-hook #'whitespace-cleanup)
#+end_src

*** Vi emulation

my journey on /*nix/ environments began with /Vi/, it's difficult for
me not to try looking everywhere for /Vi/ emulation.

| [[https://github.com/emacs-evil/evil][Evil]] | extensible vi layer |

#+begin_src emacs-lisp
(straight-use-package 'evil)

(setq evil-undo-system 'undo-redo)
(setq evil-want-keybinding    nil)

(evil-mode) ;; evil is used everywhere

(define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
#+end_src

| [[https://github.com/emacs-evil/evil-collection][Evil-Collection]] | collection of /Vi/ keybinds for some parts of /Emacs/ which are dealt incorrectly by Evil |

#+begin_src emacs-lisp
(straight-use-package 'evil-collection)

(after! evil
  (evil-collection-init))
#+end_src

| [[https://github.com/emacs-evil/evil-surround][evil-surround]] | [[https://github.com/tpope/vim-surround][vim-surround]] emulation |

#+begin_src emacs-lisp
(straight-use-package 'evil-surround)

(after! evil
  (global-evil-surround-mode))
#+end_src

*** mouse & cursor

mouse & mouse wheel behavior.

+ don't copy region to kill-ring upon selection
+ hide mouse pointer when typing
+ remove mouse wheel acceleration
+ keep mouse pointer at the same visual position

mouse wheel behavior:

+ scroll =1= line be default
+ holding =meta= scrolls half a screen
+ holding =control= adjusts the size of text (GNU Emacs =27+=)

#+begin_src emacs-lisp
(setq make-pointer-invisible          t)
(setq mouse-drag-copy-region        nil)
(setq mouse-wheel-follow-mouse      nil)
(setq mouse-wheel-progressive-speed nil)
(setq scroll-preserve-screen-position t)

(setq mouse-wheel-scroll-amount
      '(1
        ((meta) . 0.5)
        ((control) . text-scale)))
#+end_src

**** cursor

#+begin_src emacs-lisp
(setq blink-cursor-blinks     0) ;; blink forever
(setq blink-cursor-delay    0.2)
(setq blink-cursor-interval 0.3)

;; hourglass cursor
(setq display-hourglass t)
(setq hourglass-delay   0)
#+end_src

** appearance

*** fonts

#+begin_src emacs-lisp
(let ((font-size 12))

  ;; default
  (set-face-attribute 'default nil
                      :font (format "Mononoki-%s" font-size))
  ;; code
  (set-face-attribute 'fixed-pitch nil
                      :font (format "FantasqueSansMono-%s" font-size)))
#+end_src

*** themes

| [[https://gitlab.com/protesilaos/modus-themes/][Modus themes]] | pair of highly accessible themes that conform with the WCAG AAA standard for colour contrast between background and foreground combinations |

#+begin_src emacs-lisp
(when (display-graphic-p)
  (straight-use-package 'modus-themes)

  (setq modus-themes-slanted-constructs t)
  (setq modus-themes-bold-constructs    t)

  ;; modeline
  (setq modus-themes-mode-line   'accented)
  (setq modus-themes-subtle-line-numbers t)

  ;; hl-line
  (setq modus-themes-hl-line 'x-underline-at-descent-line)

  ;; links
  (setq modus-themes-links 'neutral-underline)

  ;; region
  (setq  modus-themes-region 'accent-no-extend)

  ;; org
  (setq modus-themes-org-blocks 'grayscale)

  (modus-themes-load-themes)

  (modus-themes-load-operandi)
  (define-key global-map (kbd "M-<f5>") 'modus-themes-toggle))
#+end_src

| [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] | is a package used by many other packages, it is a collection of various icon fonts |

#+begin_src emacs-lisp
(when (display-graphic-p)
  (straight-use-package 'all-the-icons)

  (defun annt/all-the-icons-setup ()
    "Checks if all-the-icon fonts are downloaded, gets them if not"
    (unless (file-exists-p (expand-file-name
                            "~/.local/share/fonts/all-the-icons.ttf"))
      (all-the-icons-install-fonts)))

  ;; install all-the-icons on boot only if missing
  (add-hook 'after-init-hook #'annt/all-the-icons-setup))
#+end_src

*** modeline

#+begin_src emacs-lisp
(setq column-number-mode   t)
(setq size-indication-mode t)
(setq column-number-indicator-zero-based nil)
#+end_src

*** tooltips

- GTK-tooltips disabled for consistency

#+begin_src emacs-lisp
(setq tooltip-short-delay         1)
(setq x-gtk-use-system-tooltips nil)
(setq tooltip-frame-parameters
      '((border-width          . 0)
        (internal-border-width . 4)))
#+end_src

* dired

/Emacs/' *dir*ectory *ed*itor.

#+begin_src emacs-lisp
(after! dired
  (setq delete-by-moving-to-trash     t) ;; safer than `rm'
  (setq dired-auto-revert-buffer      t)
  (setq dired-recursive-copies  'always)
  (setq dired-recursive-deletes 'always)
  (setq dired-listing-switches "-AFhl --group-directories-first")

  ;; less verbose output
  (add-hook 'dired-mode-hook #'dired-hide-details-mode))
#+end_src

| [[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]] | self-explanatory |

#+begin_src emacs-lisp
(after! dired
  (straight-use-package 'all-the-icons-dired)

  (add-hook 'dired-mode-hook #'all-the-icons-dired-mode))
#+end_src

* programming

** keybinds

set of keyboard binding for programming modes

#+begin_src emacs-lisp
(after! prog-mode
  (let ((map prog-mode-map))
    (define-key map (kbd "C-c c c") 'compile)
    (define-key map (kbd "C-c c r") 'recompile)))
#+end_src

** tools

| [[https://github.com/Malabarba/aggressive-indent-mode][aggressive-indent-mode]] | keeps your code nicely aligned when all you do is type |

#+begin_src emacs-lisp
(straight-use-package 'aggressive-indent)

(add-hook 'prog-mode-hook #'aggressive-indent-mode)

(after! aggressive-indent
  (setq aggressive-indent-comments-too   t)
  (setq aggressive-indent-sit-for-time 0.5))
#+end_src

- [[https://github.com/emacs-lsp/lsp-mode/][Language Server Protocol]]

#+begin_src emacs-lisp
(straight-use-package 'lsp-mode)

(after! lsp-mode
  (setq lsp-keymap-prefix "C-c l")
  (setq lsp-lens-enable                  t)
  (setq lsp-modeline-diagnostics-enable  t)
  (setq lsp-headerline-breadcrumb-enable t))
#+end_src

| [[https://github.com/emacs-lsp/lsp-ui][lsp-ui]] | UI integrations for /lsp-mode/ |

#+begin_src emacs-lisp
(straight-use-package 'lsp-ui)

(after! lsp-mode
  (setq lsp-ui-doc-position 'bottom)
  (add-hook 'lsp-mode-hook #'lsp-ui-mode))
#+end_src

** shell

settings for shell scripts.

#+begin_src emacs-lisp
(after! sh-script
  (setq sh-backlash-align t)
  (setq sh-basic-offset   4)

  ;; indentation
  (setq sh-indent-for-case-alt      '+)
  (setq sh-indent-for-case-label     0)
  (setq sh-indent-after-continuation t))
#+end_src

** C-like

languages that are syntactically similar to /C/

#+begin_src emacs-lisp
(after! cc-mode
  (add-to-list 'c-default-style '(c-mode . "k&r")))
#+end_src

*** C

#+begin_src emacs-lisp
(add-hook 'c-mode-hook #'lsp-deferred)

;; LSP :: Clangd
(setq lsp-clients-clangd-args
      '("--header-insertion-decorators=0"
        "--clang-tidy"))
#+end_src

** Lispy

*** Emacs Lisp (Elisp)

#+begin_src emacs-lisp
(after! emacs-lisp-mode
  (electric-pair-mode)
  (setq checkdoc-verb-check-experimental-flag nil)

  ;; Flycheck
  (setq flycheck-emacs-lisp-load-path 'inherit))
#+end_src

*** Racket

#+begin_src emacs-lisp
(straight-use-package 'racket-mode)
#+end_src

** Nix

#+begin_src elisp
(straight-use-package 'nix-mode)

;; detect Nix files by extension
(add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode))
#+end_src

* version control

| [[https://github.com/magit/magit][Magit]] | complete text-based user interface to [[https://git-scm.com/][Git]] |

#+begin_src emacs-lisp
(straight-use-package 'magit)

(define-key global-map (kbd "C-c g") 'magit-status)
#+end_src

* applications & utilities

| [[https://github.com/justbur/emacs-which-key][which-key]] | displays available keybindings in popup |

#+begin_src emacs-lisp
(straight-use-package 'which-key)

(setq which-key-lighter                  nil) ;; disable lighter on mode-line
(setq which-key-idle-delay               0.5)
(setq which-key-max-display-columns      nil)
(setq which-key-paging-key          "<next>")
(setq which-key-sort-order #'which-key-key-order-alpha)

;; init after set-up
(which-key-mode)
#+end_src

| [[https://github.com/Wilfred/helpful][helpful]] | better Emacs *help* buffer |

#+begin_src emacs-lisp
(straight-use-package 'helpful)

(let ((map global-map))
  (define-key map [remap      describe-key] 'helpful-key)
  (define-key map [remap   describe-symbol] 'helpful-symbol)
  (define-key map [remap  describe-command] 'helpful-command)
  (define-key map [remap describe-function] 'helpful-function)
  (define-key map [remap describe-variable] 'helpful-variable))
#+end_src

| [[https://github.com/tarsius/hl-todo][hl-todo]] | TODO/FIXME/etc keyword highlighting in comments and strings |

#+begin_src emacs-lisp
(straight-use-package 'hl-todo)

(dolist (hooks '(prog-mode-hook text-mode-hook))
  (add-hook hooks #'hl-todo-mode))
#+end_src

| [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] | mode which highlights delimiters such as parentheses, brackets or braces according to their depth |

#+begin_src emacs-lisp
(straight-use-package 'rainbow-delimiters)

(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+end_src

** completion

| [[https://github.com/oantolin/orderless][orderless]] | completion style that is /order-less/ |

#+begin_src elisp
;;(straight-use-package 'orderless)
;;
;;(setq completion-styles '(orderless))
#+end_src

| [[https://github.com/minad/vertico][vertico]] | minimalistic completion UI, uses /Emacs/' own completion engine in contrast to other tools like [[https://github.com/abo-abo/swiper][Ivy]] and [[https://github.com/emacs-helm/helm][Helm]] |

#+begin_src emacs-lisp
(straight-use-package 'vertico)

(vertico-mode)

(let ((map vertico-map))
  (define-key map (kbd "C-j") 'vertico-next)
  (define-key map (kbd "C-k") 'vertico-previous))
#+end_src

| [[https://github.com/minad/marginalia][Marginalia]] | annotations in the minibuffer |

#+begin_src elisp
(straight-use-package 'marginalia)

(after! vertico
  (marginalia-mode))
#+end_src

| [[https://github.com/company-mode/company-mode][company]] | text completion completion framework |

#+begin_src emacs-lisp
(straight-use-package 'company)

(add-hook 'prog-mode-hook #'company-mode)

(after! company
  (setq company-lighter-base  "Company")
  (setq company-idle-delay          0.3)
  (setq company-show-numbers          t)
  (setq company-minimum-prefix-length 2))
#+end_src

*** syntax checking

| [[https://github.com/flycheck/flycheck][Flycheck]] | modern on-the-fly syntax checking |

#+begin_src emacs-lisp
(straight-use-package 'flycheck)

(add-hook 'prog-mode-hook #'flycheck-mode)

(after! flycheck
  (setq flycheck-mode-line-prefix "FlyCheck")
  (setq flycheck-display-errors-delay    0.3)
  (setq flycheck-idle-change-delay       0.7)
  (setq flycheck-buffer-switch-check-intermediate-buffers t))
#+end_src

*** snippets

#+begin_src emacs-lisp
(straight-use-package 'yasnippet)

(dolist (hooks '(prog-mode-hook text-mode-hook))
    (add-hook hooks #'yas-minor-mode))

(after! yasnippet
  (define-key yas-minor-mode-map (kbd "C-<tab>") 'yas-expand)
  (yas-reload-all))
#+end_src

** org

one of /Emacs/' killer features.

#+begin_src emacs-lisp
(after! org
  (setq org-edit-src-content-indentation 0)
  (setq org-startup-folded               t)
  (setq org-confirm-babel-evaluate     nil)

  (add-hook 'org-mode-hook #'org-indent-mode))
#+end_src

| [[https://github.com/snosov1/toc-org][toc-org]] | utility to have an up-to-date table of contents on ~Org~ and ~Markdown~ |

#+begin_src emacs-lisp
(after! org
  (straight-use-package 'toc-org)

  (setq toc-org-hrefify-default "gh")
  (add-hook 'org-mode-hook #'toc-org-mode))
#+end_src

| [[https://github.com/takaxp/org-tree-slide][org-tree-slide]] | allows creating presentations with /Org-Mode/ |

- references
  - [[https://youtu.be/vz9aLmxYJB0][Emacs Tips - How to Give Presentations with Org Mode]]

#+begin_src emacs-lisp
(after! org
  (straight-use-package 'org-tree-slide)

  (defun annt/org-present-start ()
    "Configurations settings for entering presentation mode."
    (interactive "P")
    ;; save current settings
    (setq-local display-line-numbers-orig display-line-numbers)

    ;; set new values
    (setq-local text-scale-mode-amount 3)
    (setq-local display-line-numbers nil)
    (org-display-inline-images) ;; enable images for org
    (display-fill-column-indicator-mode 0)
    (text-scale-set text-scale-mode-amount))

  (defun annt/org-present-end ()
    "Configurations settings for exiting presentation mode, reverting changes
mostly."
    (interactive "P")
    ;; restore settings
    (setq-local text-scale-mode-amount 0)
    (setq display-line-numbers display-line-numbers-orig)
    (text-scale-set text-scale-mode-amount)
    (display-fill-column-indicator-mode))

  (setq org-tree-slide-activate-message   "Presentation ON")
  (setq org-tree-slide-deactivate-message "Presentation OFF")
  (setq org-image-actual-width nil)

  ;; keybinds
  (define-key org-mode-map (kbd "<f9>") 'org-tree-slide-mode)

  (add-hook 'org-tree-slide-play-hook #'annt/org-present-start)
  (add-hook 'org-tree-slide-stop-hook #'annt/org-present-end))
#+end_src
