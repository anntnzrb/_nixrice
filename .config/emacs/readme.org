#+TITLE: GNU Emacs configurations
#+AUTHOR: anntnzrb
#+EMAIL: anntnzrb@protonmail.com
#+PROPERTY: header-args :results silent
#+MACRO: export-date (eval (format-time-string "%F" (current-time)))

+ created: 2020-11-07
+ updated: *{{{export-date}}}*

* Table of Contents                                       :TOC_2_gh:noexport:
- [[#early-init-file][Early Init File]]
- [[#init-file][Init File]]
- [[#settings][Settings]]
  - [[#core-settings][Core Settings]]
  - [[#generic-configurations][Generic configurations]]
  - [[#custom][Custom]]
  - [[#editing][Editing]]
  - [[#modeline][Modeline]]
  - [[#appearance][Appearance]]
  - [[#dired][Dired]]
  - [[#utilities][Utilities]]
- [[#org-mode][Org-Mode]]
  - [[#org-mode-aesthetics][Org Mode Aesthetics]]
  - [[#presentations-with-org-mode][Presentations with Org-Mode]]
- [[#programming][Programming]]
  - [[#version-control][Version Control]]
  - [[#language-server-protocol-lsp][Language Server Protocol (LSP)]]
  - [[#linting][Linting]]
  - [[#completion][Completion]]
  - [[#generic-formatter][Generic Formatter]]
  - [[#shell][Shell]]
  - [[#c][C]]
  - [[#python][Python]]
  - [[#markdown][Markdown]]
  - [[#yaml][YAML]]
  - [[#lua][Lua]]
  - [[#rust][Rust]]
  - [[#emacs-lisp-elisp][Emacs Lisp (elisp)]]
  - [[#clojure][Clojure]]

* Early Init File

Emacs =27.1= offers new file called =early-init.el= which allows customizations
that take effect during Emacs startup earlier than the normal init file. This
file is loaded before the package system and GUI is initialized.

*References*: [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html][The Early Init File]]

#+begin_src emacs-lisp :tangle "early-init.el"
;;; early-init.el --- GNU Emacs >= 27.1 pre-initialization file

;;; Commentary:

;; This file gets loaded before the 'init.el' file.
;; Should not have more than a few files.

;;; Code:

;; Package tweaks
(setq-default package-enable-at-startup t
              package-quickstart        t)

(provide 'early-init)

;;; early-init.el ends here
#+end_src

* Init File

#+begin_src emacs-lisp :tangle "init.el"
;;; init.el --- Initialization file of GNU Emacs

;;; Commentary:
;; This file gets loaded after the 'early-init.el' file.

;;; Code:

(org-babel-load-file (expand-file-name "readme.org" user-emacs-directory))

(provide 'init)
;;; init.el ends here
#+end_src

* Settings

** Core Settings

This section is present for configurations that /should/ be executed first,
before anything else.

*** Performance

Behavior modifications as some defaults are not optimal.

**** Garbage Collector

+ Resources:
  +  [[https://emacs.stackexchange.com/a/34367][... setting `gc-cons-threshold` very high and collecting garbage when idle?]]

#+begin_src emacs-lisp
(setq gc-cons-threshold-orig gc-cons-threshold
      gc-cons-threshold          (* 1024 1024 100)
      file-name-handler-alist-orig file-name-handler-alist
      file-name-handler-alist      nil)

(run-with-idle-timer
 5 nil
 (lambda ()
   (setq gc-cons-threshold       gc-cons-threshold-orig
	     file-name-handler-alist file-name-handler-alist-orig)
   (makunbound 'gc-cons-threshold-orig)
   (makunbound 'file-name-handler-alist-orig)))
#+end_src

**** Amount of procesed data

+ References:
  + [[https://emacs-lsp.github.io/lsp-mode/page/performance/][LSP :: Performance Guide]]

#+begin_src emacs-lisp
(setq read-process-output-max (* 1024 1024))
#+end_src

**** Extra Resources

A list of useful posts regarding GNU Emacs performance.

+ [[https://blog.d46.us/advanced-emacs-startup/][Advanced Techniques for Reducing Emacs Startup Time]]

*** Package Management

I'm currently fine with =package.el= which is built-in; I do have an eye on
=straight.el= which I understand it's meant for fine adjusting specific
versions of packages to install, thing that I'm not really interested at the
moment.

#+begin_src emacs-lisp
(require 'package)

;; Repositories
(setq-default package-archives '(("GNU" . "https://elpa.gnu.org/packages/")
                                 ("Melpa" . "https://melpa.org/packages/")))

(package-initialize)
#+end_src

**** =use-package=

[[https://github.com/jwiegley/use-package#installing-use-package][use-package]] is a *macro* that allows to optimize the performance of the GNU
Emacs configuration file, it also makes everything less verbose.

On my first days of trying GNU Emacs I stepped away from using this specific
package as the change in the syntax is notorious. I was looking forward to
learn GNU Emacs & ELisp from the ground up, however what really called my
attention was the performance tweaks that this project claimed to accomplish.

I was attempting to create different functions that performed some checks
depending on certain situations, wether the package list was already refreshed
do =foo=, if not then do =bar=, among others, but at the end, this was already
=use-package='s job.

+ Install & configure =use-package=

  + =use-package-hook-name-suffix= forces to append =-hook= instead of shorter
    version.

  #+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-and-compile
    ;; Settings
    (setq-default use-package-always-ensure      nil
                  use-package-compute-statistics nil
                  use-package-hook-name-suffix   nil))

  (eval-when-compile (require 'use-package))
  #+end_src

*** Custom custom file

If you adjust settings directly from GNU Emacs (GUI), some ELisp code will be
appended to the =init.el= file, this can be a bit messy. This can be adjusted
to use another file and accomplish this.

#+begin_src emacs-lisp
(setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
#+end_src

*** Backups

#+begin_src emacs-lisp
(setq-default create-lockfiles  nil
              make-backup-files nil)
#+end_src

*** Remove clutter from modeline

Some modes add text to the modeline, this can clutter the screen a bit, but may
be disabled with the following packages.

#+begin_src emacs-lisp
(use-package diminish
  :after use-package
  :ensure)
#+end_src

*** Enable undo-ing system

#+begin_src emacs-lisp
(use-package undo-tree
  :ensure
  :diminish
  :init (global-undo-tree-mode))
#+end_src

*** More icons

#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure
  :hook
  ;; Install all-the-icons automatically only if missing
  (after-init-hook . (lambda()
                       (unless (file-exists-p
                                (expand-file-name
                                 "~/.local/share/fonts/all-the-icons.ttf"))
                         (all-the-icons-install-fonts)))))
#+end_src

** Generic configurations

Settings that do not belong anywhere specific.

#+begin_src emacs-lisp
(use-package emacs
  :init
  ;; Startup
  (setq initial-scratch-message     nil
        inhibit-startup-buffer-menu t
        inhibit-startup-screen      t
        inhibit-startup-echo-area-message t
        inhibit-startup-message           t)

  ;; Shorter prompts
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Don't prompt for confirmation when killing buffer
  (global-set-key [remap kill-buffer] #'kill-this-buffer)

  ;; Keybinds
  :bind ("<f5>" . revert-buffer)

  :hook
  ;; Enable server automatically on GNU Emacs startup
  (after-init-hook . server-start)
  ;; Auto-Update the buffer whenever it changes
  (after-init-hook . global-auto-revert-mode))
#+end_src

** Custom

Section where I place my own functions/definitions that do not belog anywhere
specific.

#+begin_src emacs-lisp
(defun annt/net-up-p (&optional host)
  "Checks if there is an active internet connection.
By default, the HOST used is 'example.com' because this is a good website for
testing. If HOST is non-nil, given HOST will be used for testing."
  (= 0 (call-process "ping" nil nil nil "-q" "-c" "1" (if host
                                                          host
                                                       "example.com"))))
#+end_src

** Editing

#+begin_src emacs-lisp
(use-package emacs
  :config
  (setq-default mode-require-final-newline t
		        show-trailing-whitespace   t
		        indent-tabs-mode           nil
		        tab-width   4
		        fill-column 79
		        display-fill-column-indicator-column (+ fill-column 1))
  :hook
  ;; delete trailing whitespaces prior saving
  (before-save-hook . delete-trailing-whitespace)

  ;; display vertical column at line limit
  ((prog-mode-hook text-mode-hook) . display-fill-column-indicator-mode)

  ;; auto-wrapping
  ((prog-mode-hook text-mode-hook) . auto-fill-mode))
#+end_src

** Modeline

#+begin_src emacs-lisp
(use-package emacs
  :config
  (setq-default column-number-mode   t
                size-indication-mode t
                column-number-indicator-zero-based nil))
#+end_src

** Appearance

#+begin_src emacs-lisp
(use-package emacs
  :init
  (menu-bar-mode   0)
  (tool-bar-mode   0)
  (scroll-bar-mode 0)

  :config
  ;; Font & size configuration
  (let* ((annt/font-name "VictorMono")
         (annt/font-size 13)
         (annt/full-font (format "%s-%s" annt/font-name annt/font-size)))

    (set-face-attribute 'default nil :font annt/full-font)
    (set-frame-font     annt/full-font nil t))

  ;; Theme
  ;; only enable if running Emacs as an X window
  (use-package modus-themes
    :if (display-graphic-p)
    :ensure
    :init (modus-themes-load-operandi)
    :bind ("M-<f5>" . modus-themes-toggle)))
#+end_src

** Dired

#+begin_src emacs-lisp
(use-package dired
  :defer
  :config
  (setq-default dired-use-ls-dired      'unspecified
                dired-recursive-deletes 'always
                dired-recursive-copies  'always
                dired-listing-switches  "-Fahlq --group-directories-first"))
#+end_src

** Utilities

*** Mini-buffer completion

/Ivy/ is a completion mechanism meant to be small and simple.

#+begin_src emacs-lisp
(use-package ivy
  :ensure
  :diminish
  :bind ((:map ivy-minibuffer-map
               ("TAB" . ivy-alt-done)))
  :init (ivy-mode))
#+end_src

*** Enhanced Search

Alternative to /I-Search/.

#+begin_src emacs-lisp
(use-package swiper
  :requires ivy
  :ensure
  :bind ("C-s" . swiper))
#+end_src

*** Which-Key

#+begin_src emacs-lisp
(use-package which-key
  :ensure
  :diminish
  :defer
  :init (which-key-mode)
  :config
  (setq-default which-key-is-verbose t
                which-key-idle-delay 0.5))
#+end_src

*** Helpful

Enhanced GNU Emacs' =*help*=.

+ *This replaces default =*help*= behavior.*

#+begin_src emacs-lisp
(use-package helpful
  :ensure
  :defer 5
  :config
  (global-set-key [remap describe-command]  #'helpful-command)
  (global-set-key [remap describe-function] #'helpful-function)
  (global-set-key [remap describe-key]      #'helpful-key)
  (global-set-key [remap describe-symbol]   #'helpful-symbol)
  (global-set-key [remap describe-variable] #'helpful-variable))
#+end_src

*** Rainbow Delimiters

... aka /Rainbow Parentheses/.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure
  :defer 3
  :hook  (prog-mode-hook . rainbow-delimiters-mode))
#+end_src

*** Vi Emulation

My journey on /*nix/ environments began with /Vi/, it's difficult for me not to
try looking everywhere for Vi emulation.

**** Evil

/Evil/ is probably the best package for Vi emulation, even tho I'd really
prefer something simpler... I haven't found anything else other than /Viper/
(built-in) and well, just no.

#+begin_src emacs-lisp
(use-package evil
  :ensure
  :init
  (setq-default evil-want-minibuffer t
                evil-want-C-u-scroll t
                evil-want-C-i-jump   nil
                evil-want-keybinding nil
                evil-want-keybinding nil
                evil-undo-system 'undo-tree)
  :config
  ;; Use ESC as C-g
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (evil-mode))
#+end_src

**** Evil Collection

Collection of Vi keybinds for some parts of GNU Emacs which are dealt
incorrectly by Evil.

#+begin_src emacs-lisp
(use-package evil-collection
  :ensure   t
  :requires evil
  :config   (evil-collection-init))
#+end_src

**** Evil Surround

As obvious as it sounds, yes, this is [[https://github.com/tpope/vim-surround][vim-surround]], but for GNU Emacs.

#+begin_src emacs-lisp
(use-package evil-surround
  :requires evil
  :ensure
  :defer
  :init (global-evil-surround-mode))
#+end_src

*** Aggressive-indent

Useful for /Lisps/ specially, non-intrusive if configured correctly.

#+begin_src emacs-lisp
(use-package aggressive-indent
  :ensure
  :config
  (setq-default aggressive-indent-comments-too t
                aggressive-indent-sit-for-time 0.5)
  :hook
  (prog-mode-hook . aggressive-indent-mode))
#+end_src

* Org-Mode

#+begin_src emacs-lisp
(use-package org
  :defer
  :config
  ;; General Org settings
  (setq-default org-hide-emphasis-markers t
                org-edit-src-content-indentation 0
                org-confirm-babel-evaluate       nil)

  ;; Backends for Org Exportation
  (setq-default org-export-backends '(html latex man md odt))

  (use-package ob-C       :defer :commands (org-babel-execute:C))
  (use-package ob-python  :defer :commands (org-babel-execute:python))
  (use-package ob-shell   :defer :commands (org-babel-execute:shell))
  (use-package ob-clojure :defer :commands (org-babel-execute:clojure))
  (use-package ob-java    :defer :commands (org-babel-execute:java))

  ;; Templates
  ;; needed for templates to work
  (use-package org-tempo)
  (setq-default org-structure-template-alist
                '(("src"   . "src")
                  ("conf"  . "conf")
                  ;; languages
                  ("el"  . "src emacs-lisp")
                  ("sh"  . "src sh")
                  ("c"   . "src c")
                  ("py"  . "src python")
                  ;; misc
                  ("comm" . "comment")
                  ("ex"   . "example")
                  ("quo"  . "quote")))

  ;; Table of contents
  (use-package toc-org
    :after org
    :defer
    :ensure
    :hook (org-mode-hook . toc-org-mode))
  :hook
  ;; Enable visual identation
  (org-mode-hook . org-indent-mode))
#+end_src

** Org Mode Aesthetics

Base /Org/ is usable but its look can be enhanced with some details.

#+begin_src emacs-lisp
(use-package org-superstar
  ;; Only if client is being ran graphically
  :if (display-graphic-p)
  :after org
  :ensure
  :init
  (setq-default org-superstar-special-todo-items t)
  :hook (org-mode-hook . org-superstar-mode))
#+end_src

** Presentations with Org-Mode

[[https://github.com/takaxp/org-tree-slide][org-tree-slide]] is a package that allows creating presentations with /Org-Mode/,
it can even export to =.pdf= using /Beamer/ (needs /LaTeX/ tools installed).

There are a few things that can be done to extend this packages, a few of them
being toggling =display-fill-column-indicator-mode= and increasing the font
size.

+ References
  + [[https://youtu.be/vz9aLmxYJB0][Emacs Tips - How to Give Presentations with Org Mode]]

#+begin_src emacs-lisp
(use-package org-tree-slide
  :ensure
  :defer
  :init
  (defun annt/org-present-start ()
    "Configurations settings for entering presentation mode."
    (setq text-scale-mode-amount 3)
    (interactive "P")
    (org-display-inline-images)
    (display-fill-column-indicator-mode 0)
    (text-scale-set text-scale-mode-amount))

  (defun annt/org-present-end ()
    "Configurations settings for exiting presentation mode, reverting changes
mostly."
    (interactive "P")
    (setq text-scale-mode-amount 0)
    (text-scale-set text-scale-mode-amount)
    (display-fill-column-indicator-mode))

  (setq-default org-tree-slide-activate-message "Presentation ON"
                org-tree-slide-deactivate-message "Presentation OFF"
                org-image-actual-width nil)
  :bind (:map org-mode-map
              ("<f9>" . org-tree-slide-mode))
  :hook
  (org-tree-slide-play-hook . annt/org-present-start)
  (org-tree-slide-stop-hook . annt/org-present-end))
#+end_src

* Programming

** Version Control

#+begin_src emacs-lisp
;; Follow some good git practices
(use-package git-commit
  :defer
  :after magit
  :init
  (setq-default git-commit-summary-max-length 50
                git-commit-style-convention-checks
                '(non-empty-second-line overlong-summary-line)))

#+end_src

*** Magit

Interactive Git

#+begin_src emacs-lisp
(use-package magit
  :ensure
  :defer
  :bind ("C-c g" . magit-status))
#+end_src

** Language Server Protocol (LSP)

This package /should not/ be =defer='d.

#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure
  :init (setq-default lsp-keymap-prefix "C-c l")
  :config
  (setq-default lsp-lens-enable t
                lsp-modeline-diagnostics-enable t
                lsp-headerline-breadcrumb-enable t))
#+end_src

** Linting

#+begin_src emacs-lisp
(use-package flycheck
  :ensure
  :defer
  :config
  (setq-default flycheck-mode-line-prefix "FlyCheck"
                flycheck-checker-error-threshold 100
                flycheck-display-errors-delay    1
                flycheck-idle-change-delay       1))
#+end_src

** Completion

#+begin_src emacs-lisp
(use-package company
  :ensure
  :defer
  :config
  (setq-default company-show-numbers ''t
                company-idle-delay   0.25
                company-minimum-prefix-length 2))
#+end_src

** Generic Formatter

#+begin_src emacs-lisp
(use-package reformatter
:ensure
:defer)
#+end_src

** Shell

#+begin_src emacs-lisp
(use-package sh-script
  :defer
  :init
  (setq-default sh-backslash-column fill-column
                sh-indent-after-case     0
                sh-indent-for-case-alt   0
                sh-indent-after-switch   0
                sh-indent-for-case-label 0)
  :hook
  ;; Linting
  (sh-mode-hook . flycheck-mode)
  ;; Completion
  (sh-mode-hook . company-mode))
#+end_src

** C

#+begin_src emacs-lisp
(use-package cc-mode
  :defer
  :config
  ;; GNU-styled with a few tweaks
  (setq-default c-set-style    "gnu"
                c-basic-offset 4)

  ;; Formatter
  ;; name of the of binary
  (defconst annt/c-fmt-bin "uncrustify")

  (defcustom c-fmt-command annt/c-fmt-bin
    "Command used to format C files."
    :group 'c
    :type  'file
    :safe  'stringp)

  (reformatter-define c-fmt-command
    :group   'c
    :program annt/c-fmt-bin
    :args    '("--no-backup"))

  ;; keybind assignment for the formatter
  :bind ("C-c c f" . c-fmt-command))
#+end_src

** Python

+ Dependencies:
  + =python= (tested for ~>= 3.0~)
  + =lsp-python-ms= (for [[https://emacs-lsp.github.io/lsp-mode/page/installation/][LSP]])
    + The offered auto-installation scripts seems to be working fine, still
      testing

#+begin_src emacs-lisp
(use-package python
  :defer
  :config
  ;; Force using Python3
  (setq-default python-shell-interpreter "python3")

  ;; LSP
  (use-package lsp-python-ms
    :requires lsp-mode
    :ensure
    :init (setq-default lsp-python-ms-auto-install-server t)
    :hook (python-mode-hook . lsp-deferred)))
#+end_src

** Markdown

Unhandled natively... Perhaps exporting /Org/ --> /Markdown/ is not a bad idea.
Still needed sometimes for =README= files, etc.

+ Dependencies:
  =pandoc= (for Live Preview)

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure
  :defer
  :init     (setq-default  markdown-command "pandoc")
  :commands (markdown-mode gfm-mode)
  :mode     (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'"       . markdown-mode)))

;; Table of Contents support
(use-package markdown-toc
  :requires markdown-mode
  :ensure
  :defer
  :init
  (setq-default markdown-toc-header-toc-start "<!-- Markdown TOC :: Start -->"
                markdown-toc-header-toc-end   "<!-- Markdown TOC :: End -->")
  :hook (markdown-mode-hook . markdown-toc-mode))
#+end_src

** YAML

No native support, [[https://github.com/yoshiki/yaml-mode][yaml-mode]] handles this.

#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure
  :defer)
#+end_src

** Lua

Lua support doesn't ship with Emacs. [[https://github.com/immerrr/lua-mode][lua-mode]] takes care.

#+begin_src emacs-lisp
(use-package lua-mode
  :ensure
  :defer
  :init (setq-default lua-indent-level 2))
#+end_src

** Rust

Rust programming is not part of GNU Emacs...
[[https://github.com/rust-lang/rust-mode][Rust Mode]] accounts for this.

#+begin_src emacs-lisp
(use-package rust-mode
  :ensure
  :defer
  :config
  (setq-default rust-always-locate-project-on-open t
                rust-format-on-save t)
  :hook (rust-mode-hook . lsp-deferred))
#+end_src

** Emacs Lisp (elisp)

#+begin_src emacs-lisp
(use-package elisp-mode
  :init   (electric-pair-mode)
  :config (setq-default checkdoc-verb-check-experimental-flag nil)
  :hook
  ;; Linting
  (emacs-lisp-mode-hook . flycheck-mode)
  ;; Completion
  (emacs-lisp-mode-hook . company-mode))
#+end_src

** Clojure

+ Dependencies:
  + =JDK=
  + =Lein= (for REPL)
  + =clojure-lsp= (for [[https://emacs-lsp.github.io/lsp-mode/page/installation/][LSP]])
    + The offered auto-installation scripts seems to be working fine, still
      testing

#+begin_src emacs-lisp
(use-package clojure-mode
  :ensure
  :defer
  :init (electric-pair-mode)
  :config
  ;; Disable native LSP completion to use CIDER's
  (setq-default lsp-enable-completion-at-point nil)
  ;; REPL
  (use-package cider
    :if (executable-find "lein")
    :ensure)
  :hook
  ;; LSP
  ((clojure-mode-hook clojurec-mode-hook clojurescript-mode-hook) . company-mode)
  ((clojure-mode-hook clojurec-mode-hook clojurescript-mode-hook) . lsp-deferred))
#+end_src
