#+TITLE: GNU Emacs configuration file
#+AUTHOR: anntnzrb
#+EMAIL: anntnzrb@protonmail.com
#+OPTIONS: toc:nil
#+PROPERTY: header-args :results silent
#+MACRO: export-date (eval (format-time-string "%F" (current-time)))

+ created: 2020-11-07
+ updated: *{{{export-date}}}*

* table of contents                                       :TOC_2_gh:noexport:
- [[#preamble][preamble]]
  - [[#package-management][package management]]
- [[#general][general]]
  - [[#mouse][mouse]]
  - [[#appearance][appearance]]
  - [[#dired][dired]]
  - [[#formatting][formatting]]
  - [[#misc][misc]]
- [[#development][development]]
  - [[#git][Git]]
  - [[#lsp][LSP]]
  - [[#completion][completion]]
  - [[#snippets][snippets]]
  - [[#languages][languages]]
- [[#org-mode][org-mode]]
  - [[#appearance-1][appearance]]
  - [[#org-toc][org-toc]]
- [[#packages][packages]]
  - [[#misc-1][misc]]
  - [[#ivy][ivy]]
  - [[#which-key][which-key]]
  - [[#vi-keybinds][vi-keybinds]]
- [[#applications][applications]]
  - [[#terminals][terminals]]
- [[#keybinds][keybinds]]
- [[#acknowledgements][acknowledgements]]
  - [[#protesilaos-stavrou][Protesilaos Stavrou]]
  - [[#cem-keylan][Cem Keylan]]
  - [[#david-wilson][David Wilson]]
  - [[#sandeep-nambiar][Sandeep Nambiar]]

* preamble

use =lexical-binding=

#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-
#+end_src

garbage collector settings

#+begin_src emacs-lisp
(setq-default gc-cons-threshold (* 8 1024 1024))
#+end_src

disable emacs settings up custom variables

#+begin_src emacs-lisp
(setq-default custom-file null-device)
#+end_src

this is set-up here first in order to take advantage of =use-package=

** package management

*** repositories

#+begin_src emacs-lisp
(require 'package)
(setq-default package-archives '(("elpa"  . "https://elpa.gnu.org/packages/")
                                 ("melpa" . "https://melpa.org/packages/")
                                 ("org"   . "https://orgmode.org/elpa/")))
(package-initialize)

;; only update if needed
(unless package-archive-contents
  (package-refresh-contents))
#+end_src

*** use-package

=use-packages= is a handy tool, i use it mostly to groups things up and reduce
syntax verbosity

#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; configure prior loading
(eval-and-compile
  (setq-default use-package-always-ensure t
                use-package-hook-name-suffix nil))

(eval-when-compile
  (require 'use-package))
#+end_src

* general

basic settings

** mouse

even tho we are on the *no-mouse* master-race, having some tiny stuff there should
be handy

#+begin_src emacs-lisp
(xterm-mouse-mode t)
#+end_src

** appearance

user interface

#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :custom
  (menu-bar-mode   nil)
  (tool-bar-mode   nil)
  (scroll-bar-mode nil)
  (inhibit-splash-screen t))
#+end_src

lines

#+begin_src emacs-lisp
(global-display-line-numbers-mode)
(setq-default display-line-numbers-type 'relative)
#+end_src

font & size

#+begin_src emacs-lisp
;; set default font
(defun annt/set-default-font()
  "set font defaults"
  (dolist (face '(default fixed-pitch variable-pitch))
    (set-face-attribute `,face nil :font "Victor Mono 14")))

;; needed when working with emacs as a daemon
(use-package frame
  :ensure nil
  :if (daemonp)
  :hook
  (after-make-frame-functions . (lambda (frame)
                                  (with-selected-frame frame (annt/set-default-font)))))
#+end_src

theme

#+begin_src emacs-lisp
(use-package modus-operandi-theme)

;; dark themes
(use-package modus-vivendi-theme)

;; load theme
(load-theme 'modus-vivendi t)
#+end_src

** dired

#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :custom
  (dired-recursive-copies 'always)
  (dired-recursive-deletes 'always)
  (delete-by-moving-to-trash t)
  (dired-listing-switches
   "-AFGhlv --group-directories-first --time-style=long-iso")
  :hook
  (dired-mode-hook . hl-line-mode))
#+end_src

** formatting

+ spaces over tabs
+ tab width 4
+ max line lenght 80 & auto-wrap
+ show column number in modeline
+ show trailing whitespaces and delete them on save

#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :custom
  (tab-width                4)
  (indent-tabs-mode         nil)
  (tab-always-indent        'complete)
  (fill-column              80)
  (show-trailing-whitespace t)
  :hook
  (after-init-hook  . column-number-mode)
  (before-save-hook . delete-trailing-whitespace))

(use-package simple
  :requires diminish
  :after    diminish
  :diminish
  :ensure nil
  :hook
  (org-mode-hook  . auto-fill-mode)
  (prog-mode-hook . auto-fill-mode)
  (text-mode-hook . auto-fill-mode))
#+end_src

** misc

replace =yes/no= prompts with shorter =y/n=

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

reload file automatically if edited externally

#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src

/annoying/ backups

#+begin_src emacs-lisp
(setq-default
 backup-directory-alist `(("." . ,(expand-file-name "~/.cache/emacs_backups"))))
#+end_src

inmediatly kill buffer without confirmation

#+begin_src emacs-lisp
(global-set-key [remap kill-buffer] #'kill-this-buffer)
#+end_src

* development

#+begin_src emacs-lisp
(use-package prog-mode
  :ensure nil
  :custom
  (show-paren-mode t)
  :bind
  (("C-c c p" . previous-error)
   ("C-c c n" . next-error)
   ("C-c c c" . compile)
   ("C-c c r" . recompile)))
#+end_src

** Git

*** Magit

an interface for Git

#+begin_src emacs-lisp
(use-package magit)
#+end_src

**** Evil-Magit

vi-keybinds for Magit

#+begin_src emacs-lisp
(use-package evil-magit
  :requires magit
  :after    magit)
#+end_src

** LSP

the language-protocol-server

#+begin_src emacs-lisp
(defun annt/lsp-init()
  (setq-default
   lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
  :init     (setq-default lsp-keymap-prefix "C-c l")
  :commands (lsp lsp-deferred)
  :hook
  ;; languages to enable LSP
  (c-mode-hook      . lsp-deferred)
  (python-mode-hook . lsp-deferred)

  ;; misc
  (lsp-mode-hook . lsp-enable-which-key-integration)
  (lsp-mode-hook . annt/lsp-init))
#+end_src

** completion

text completion framework

#+begin_src emacs-lisp
(use-package company
  :diminish
  :hook
  ;; languages to enable company
  (prog-mode-hook . company-mode)
  :custom
  (company-idle-delay            0)
  (company-minimum-prefix-length 1))
#+end_src

** snippets

[[https://github.com/joaotavora/yasnippet][YASnippet]] is a template system, snippets for short. it does not ship
with the actual snippets, extra packages are needed for them

#+begin_src emacs-lisp
(use-package yasnippet
  :diminish
  :hook (prog-mode-hook . yas-minor-mode)
  :config (yas-reload-all))

;; snippets
(use-package yasnippet-snippets)
#+end_src

** languages

formatter for pretty much every languages

#+begin_src emacs-lisp
(use-package format-all :bind ("C-c f" . format-all-buffer))
#+end_src

*** Shell

#+begin_src emacs-lisp
(use-package flycheck :hook (sh-mode-hook . flycheck-mode))
#+end_src


*** C

#+begin_src emacs-lisp
(use-package cc-mode
  :init
  (defun annt/c-prog-settings ()
    "personal settings for C programming"
    (setq-default c-basic-offset  4
                  c-default-style "bsd"))
  :hook (c-mode-hook . annt/c-prog-settings))
#+end_src

**** LSP for C

#+begin_src emacs-lisp
(use-package eglot
  :if       (executable-find "clangd")
  :requires lsp-mode
  :after    lsp-mode
  :config   (add-to-list 'eglot-server-programs '((c-mode) "clangd"))
  :hook     (c-mode-hook . eglot-ensure))
#+end_src


*** Python

#+begin_src emacs-lisp
;; Python interpreter to use
(setq-default py-ver "python3")

(use-package python
  :ensure nil
  :custom (python-shell-interpreter py-ver))
#+end_src

**** LSP for Python

#+begin_src emacs-lisp
(use-package lsp-python-ms
  :requires lsp-mode
  :after    lsp-mode
  :init     (setq-default lsp-python-ms-auto-install-server t)
  :hook
  (python-mode-hook . (lambda ()
                        (require 'lsp-python-ms)
                        (lsp-deferred))))
#+end_src

*** Markdown

#+begin_src emacs-lisp
(use-package markdown-mode
  :mode (("README\\.md\\'" . gfm-mode)
         ("readme\\.md\\'" . gfm-mode)
         ("\\.md\\'"       . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :config
  ;; enables "org-edit-src-code"-like code blocks [C-c ']
  (use-package edit-indirect)
  (setq-default markdown-fontify-code-blocks-natively t))
#+end_src

* org-mode

this little (big) thing is one of the main reasons why i switch to this
environment in the first place

#+begin_src emacs-lisp
(use-package org
  :hook (org-mode-hook . org-indent-mode)
  :custom
  ;; general
  (org-return-follows-link nil)

  ;; appearance
  (org-ellipsis " }}}")
  (org-hide-emphasis-markers t)

  :config
  ;; code blocks
  (setq-default org-edit-src-content-indentation 0
                org-src-fontify-natively         t
                org-src-tab-acts-natively        t
                org-confirm-babel-evaluate       nil)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell      . t)
     (C          . t)
     (haskell    . t)
     (python     . t)
     (java       . t)))
  (require 'org-tempo) ;; needed as of org-mode 9.3
  (setq-default org-structure-template-alist
                '(("src"  . "src")
                  ;; languages
                  ("el"   . "src emacs-lisp")
                  ("sh"   . "src sh")
                  ("c"    . "src c")
                  ("hs"   . "src haskell")
                  ("py"   . "src python")
                  ("java" . "src java")
                  ;; misc
                  ("cent" . "center")
                  ("comm" . "comment")
                  ("ex"   . "example")
                  ("quo"  . "quote")
                  ("verb" . "verbatim")
                  ("vers" . "verse"))))
#+end_src

** appearance

improved version of org-bullets

#+begin_src emacs-lisp
(use-package org-superstar :hook (org-mode-hook . org-superstar-mode))
#+end_src

** org-toc

handy /Table of Contents/ package

#+begin_src emacs-lisp
(use-package toc-org :hook (org-mode-hook . toc-org-mode))
#+end_src

* packages

the goal here is and will be to always have the least amount of packages as
possible, only use what is really neccesary

** misc

some stuff that does not belong anywhere specific

+ i would personally prefer this to be at last, but the config works as
intended by leaving this before any other package

*** diminish

supress modeline status

#+begin_src emacs-lisp
(use-package diminish
  :requires use-package
  :after    use-package)
#+end_src

*** undo-tree

alternative undo system for GNU/Emacs (enables evil-mode redo)

+ this enables {un,re}-doing for [[evil]]
+ *TODO*: use native undo system on future GNU/Emacs `28`

#+begin_src emacs-lisp
(use-package undo-tree :diminish)

;; enable
(global-undo-tree-mode)
#+end_src

*** clipboard support for the terminal

emacs does not have =xclip= support on the terminal, add it

#+begin_src emacs-lisp
(use-package xclip
  :if (executable-find "xclip")
  :unless (eq system-type 'windows-nt)
  :config (xclip-mode))
#+end_src

** ivy

mini-buffer completion mechanism

#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :custom
  (ivy-use-virtual-buffers t)
  (enable-recursive-minibuffers t)
  :config (ivy-mode t))
#+end_src

** which-key

minor mode that displays bindings following your currently entered incomplete
command in a popup

#+begin_src emacs-lisp
(use-package which-key
  :diminish
  :init     (which-key-mode)
  :custom   (which-key-idle-delay 0.25))
#+end_src

** vi-keybinds

i am used to vi-like keybinds and modes, evil reproduces them very well

*** evil

#+begin_src emacs-lisp
(use-package evil
  :custom
  (evil-undo-system   'undo-tree)
  (evil-want-C-i-jump nil)
  :config
  ;; go to normal mode when "C-g"
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  :hook (after-init-hook . evil-mode))
#+end_src

* keybinds

#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :bind
  ("C-s" . save-buffer))
#+end_src

window movement using [[https://github.com/deb0ch/emacs-winum/][winum]]

#+begin_src emacs-lisp
(use-package winum
  :bind
  ("M-1" . winum-select-window-1)
  ("M-2" . winum-select-window-2)
  ("M-3" . winum-select-window-3)
  ("M-4" . winum-select-window-4)
  ("M-5" . winum-select-window-5)
  ("M-6" . winum-select-window-6)
  ("M-7" . winum-select-window-7)
  ("M-8" . winum-select-window-8)
  ("M-9" . winum-select-window-9)
  ("M-0" . winum-select-window-by-number)
  :config (winum-mode))
#+end_src

* acknowledgements

** Protesilaos Stavrou

*** Vim user's first impressions of GNU Emacs

explains the main differences between the default keybinds both systems offer;
overall how Emacs and Vim can be similar.

[[https://youtu.be/VlVl_5RyG3M][video link]]

*** Vlog: Emacs mindset and Unix philosophy

talks about how the Emacs mentality of "everything inside of Emacs" shares
the same goal as the terminal/CLI power user: to create an integrated
computing environment.

[[https://youtu.be/qTncc2lI6OI][video link]]

*** Vlog: best tiling WM, Emacs vs Vim, etc

talks about why you should be picking =X= software and not copying others only
to follow trends.

[[https://youtu.be/CxOkhsDfy_4][video link]]

*** Vlog: switching to emacs

discusses whether switching to GNU/Emacs is the right thing for you.

[[https://youtu.be/FLjbKuoBlXs][video link]]

*** configs

even tho his configuration =is/was= a bit overwhelming for knowledge at the
time, he always had different approaches to accomplish the defaults you would
find copy and pasted everywhere else.

[[https://protesilaos.com/dotemacs][link]]

** Cem Keylan

Cem's configuration /is/was/ aimed to be minimal, helped a lot since he was
also experimenting the emacs world at the time

[[https://git.ckyln.com/emacs.d][link]]

** David Wilson

after my 3rd attempt trying emacs, he was putting up an emacs from scratch
series where he built from ground up a usable IDE-like system

[[https://www.youtube.com/playlist?list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ][Emacs From Scratch YouTube Playlist]]

** Sandeep Nambiar

straight-forward introduction to configuring emacs

[[https://www.sandeepnambiar.com/my-minimal-emacs-setup][link]]
