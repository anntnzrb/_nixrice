#+title:    annt's GNU Emacs'
#+author:   anntnzrb
#+email:    anntnzrb@proton.me
#+property: header-args :results silent

# macros
#+macro: export-date    (eval (format-time-string "%F" (current-time)))
#+macro: emacs-version  (eval (substring (emacs-version) 10 14))
#+macro: system-options (eval system-configuration-options)

- created: 2020-11-07
- updated: *{{{export-date}}}*
- /GNU Emacs/ system details:
  - version: *{{{emacs-version}}}*
  - build options: *{{{system-options}}}*

* table of contents                                          :TOC_3:noexport:
- [[#core-settings][core settings]]
  - [[#initialization-files][initialization files]]
    - [[#early-initel][=early-init.el=]]
    - [[#initel][=init.el=]]
  - [[#header][header]]
  - [[#preamble][preamble]]
  - [[#package-management][package management]]
    - [[#straightel][~straight.el~]]
  - [[#helpers][helpers]]
  - [[#generals][generals]]
    - [[#emacs-server][Emacs server]]
    - [[#indentification][indentification]]
    - [[#custom-custom-file][custom custom file]]
    - [[#backups][backups]]
    - [[#editing][editing]]
    - [[#vi-emulation][Vi emulation]]
    - [[#mouse--cursor][mouse & cursor]]
    - [[#binds][binds]]
  - [[#appearance][appearance]]
    - [[#fonts][fonts]]
    - [[#themes][themes]]
    - [[#dashboard][dashboard]]
    - [[#modeline][modeline]]
    - [[#tooltips][tooltips]]
- [[#dired][dired]]
- [[#programming][programming]]
  - [[#keybinds][keybinds]]
  - [[#tools][tools]]
  - [[#shell][shell]]
  - [[#makefile][Makefile]]
  - [[#c-like][C-like]]
    - [[#c][C]]
  - [[#lispy][Lispy]]
    - [[#emacs-lisp-elisp][Emacs Lisp (Elisp)]]
    - [[#racket][Racket]]
    - [[#fennel][Fennel]]
  - [[#nix][Nix]]
  - [[#haskell][Haskell]]
  - [[#lua][Lua]]
  - [[#yaml][YAML]]
  - [[#html][HTML]]
- [[#version-control][version control]]
- [[#applications--utilities][applications & utilities]]
  - [[#completion][completion]]
    - [[#syntax-checking][syntax checking]]
    - [[#snippets][snippets]]
  - [[#spelling][spelling]]
    - [[#flyspell][FlySpell]]
  - [[#bookmarks][bookmarks]]
  - [[#org][org]]

* core settings

** initialization files

these file should already be present in the =user-emacs-directory= directory
but are kept here for editing purposes.

*** =early-init.el=

/GNU Emacs/ =27.1= offers new file called =early-init.el= which allows
customizations that take effect during Emacs startup earlier than the normal
init file. This file is loaded before the package system and GUI is
initialized.

references:
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html][The Early Init File]]

#+begin_src emacs-lisp :tangle "early-init.el"
;;; early-init.el --- GNU Emacs >= 27.1 pre-initialization file -*- lexical-binding: t -*-

;; Copyright (C) 2020-2022 anntnzrb

;; Author: anntnzrb <anntnzrb@proton.me>
;; Keywords: initialization

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This file is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; At this early stage there a few settings to be set in order to set-up Emacs
;; efficiently, this file should not be long at all.  All other usual
;; configuration should remain elsewhere.  This fill is only valid for GNU
;; Emacs 27.1+.  Gets loaded before the 'init.el' file.

;;; Code:

;; check if using minimum required version
(let ((min-ver "28.0"))
  (when (version< emacs-version min-ver)
    (error "Your version of GNU Emacs (v%s) is outdated, you need at least v%s"
           emacs-version min-ver)))

;; The garbage collector threshold is increased here to prevent it from
;; running at these early stages, the objective here is to reset it later.
;; Consider checking the 'init.el' file right next to this file for the
;; remaining instructions.
;; WARNING :: Not adjusting this settings properly will lead to
;; freezes/stuttering and unexpected behaviour.
(setq gc-cons-threshold most-positive-fixnum)
(setq gc-cons-percentage 0.6)

;; Increase the amount of data which Emacs reads from processes
(setq read-process-output-max (* 1024 1024))

;; Native Compilation
;; REVIEW: future refactor
(when (and
       (fboundp 'native-comp-available-p)
       (native-comp-available-p))
  (message "Native compilation is available.")
  (setq native-comp-async-report-warnings-errors 'silent)
  ;; Prevent unwanted runtime compilation
  (setq native-comp-deferred-compilation nil))

;; package tweaks
(setq package-enable-at-startup nil) ;; needed by `straight.el'

;; GUI
(menu-bar-mode   0)
(tool-bar-mode   0)
(scroll-bar-mode 0)
(setq inhibit-splash-screen  t)
(setq inhibit-startup-screen t)
(setq frame-inhibit-implied-resize t) ;; don't frame-resize this early

;; dialogs; preferably disabled for a totally keyboard-driven experience
(setq use-dialog-box  nil)
(setq use-file-dialog nil)

(provide 'early-init)
;;; early-init.el ends here
#+end_src

*** =init.el=

this file is responsible of loading the necessary /ELisp/ code whenever
/GNU Emacs/ starts. my configuration is (obviously) written literally using
/Org/ so the purpose of this file is to contain the instructions to transform
this literate configuration into /ELisp/ code and load it.

#+begin_src emacs-lisp :tangle "init.el"
;;; init.el --- Initialization file of GNU Emacs -*- lexical-binding: t; -*-

;; Copyright (C) 2020-2022 anntnzrb

;; Author: anntnzrb <anntnzrb@proton.me>
;; Keywords: initialization

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This file is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; This initialization file configures the literate configuration file written
;; in Org, it does so by checking when it was last updated and tangles it only
;; when needed, loads the non-updated file otherwise.  The main goal here is to
;; remove the unneeded tangling and improve startup time.

;; There are a few other options I like to keep here, should be well-documented.

;; Lastly, there a few benchmarks to debug the initialization.

;;; Code:

(defvar annt--emacs-config-file "readme"
  "Base name of annt's configuration file.")

(defun annt--notify-and-log (msg)
  "Prints MSG and logs it to a file in `user-emacs-directory' directory."
  (message msg)

  ;; log to file (suppress stdout)
  (let ((inhibit-message t)
        (message-log-max nil))
    (append-to-file
     (format "[%s] :: %s\n" (current-time-string) msg)
     nil
     (expand-file-name "emacs.log" user-emacs-directory))))

(defun annt--expand-emacs-file-name (file extension)
  "Return canonical path to FILE to Emacs config with EXTENSION."
  (locate-user-emacs-file
   (concat file extension)))

(defun annt--org-tangle-and-byte-compile (file target-file)
  "Tangle given FILE to TARGET-FILE and byte-compile it."
  (require 'ob-tangle)
  (org-babel-tangle-file file target-file)
  (byte-compile-file          target-file))

(defun annt--update-emacs-config ()
  "If configuration files were modified, update them with the latest changes.
First it checks wether the literate configuration file (Org) was modified or
not, only when there's a change it deletes the previously tangled ELisp code
and re-tangles it, byte-compiles it afterwards."
  (let* ((cfg-file annt--emacs-config-file)
         (cfg-file-org
          (annt--expand-emacs-file-name cfg-file ".org"))
         (cfg-file-el
          (annt--expand-emacs-file-name cfg-file ".el"))
         (cfg-file-el-compiled
          (annt--expand-emacs-file-name cfg-file ".elc"))
         (cfg-file-org-last-modified
          (file-attribute-modification-time (file-attributes cfg-file-org))))

    (require 'org-macs)
    (unless (org-file-newer-than-p cfg-file-el cfg-file-org-last-modified)
      (annt--notify-and-log "Deleting old configurations for update...")
      (delete-file cfg-file-el          t)
      (delete-file cfg-file-el-compiled t)
      (annt--org-tangle-and-byte-compile cfg-file-org cfg-file-el))))

;; set working directory to `~' regardless of where Emacs was started from
(cd (expand-file-name "~/"))

;; configuration file initialization
(let* ((cfg-file annt--emacs-config-file)
       (cfg-file-org (annt--expand-emacs-file-name cfg-file ".org"))
       (cfg-file-el  (annt--expand-emacs-file-name cfg-file ".el")))

  ;; only tangle if tangled file does not exists
  (unless (file-exists-p cfg-file-el)
    (annt--notify-and-log "Literate configuration has not been tangled yet...")
    (annt--notify-and-log "Proceeding to tangle & byte-compile configuration...")
    (annt--org-tangle-and-byte-compile cfg-file-org cfg-file-el)
    (annt--notify-and-log "Literate configuration was tangled & byte-compiled."))

  ;; finally load the configuration file
  (load-file cfg-file-el)
  (annt--notify-and-log "Configuration loaded."))

;; `kill-emacs-hook' used for startup time
(add-hook 'kill-emacs-hook #'annt--update-emacs-config)

;; WARNING: Reset garbage collector (should be at the end of this file)
;; After everything else is set-up, set the garbage collector to a considerable
;; non-archaic value.
(defun annt--setup-gc ()
  "Sets up efficient garbage collector settings.
The following values are modified: `gc-cons-threshold' and
`gc-cons-percentage'."
  (setq gc-cons-threshold (* 20 1024 1024))
  (setq gc-cons-percentage 0.1))

(defun annt--debug-init()
  "Displays information related to initialization."
  (let ((pkg-count 0)
        (init-time (emacs-init-time)))

    ;; package.el
    (when (bound-and-true-p package-alist)
      (setq pkg-count (length package-activated-list)))

    ;; straight.el
    (when (boundp 'straight--profile-cache)
      (setq pkg-count (+ (hash-table-count straight--profile-cache) pkg-count)))

    (annt--notify-and-log
     (format
      "GNU Emacs initialized in %s (%d pkgs) :: performed %d garbage collections."
      init-time pkg-count gcs-done))))

;; `emacs-startup-hook' can be used to set this after init files are done
(add-hook 'emacs-startup-hook #'annt--setup-gc)
(add-hook 'emacs-startup-hook #'annt--debug-init)

(provide 'init)
;;; init.el ends here
#+end_src

** header

=lexical-binding= should make /Emacs/ a tiny bit faster

#+begin_src emacs-lisp
;;; readme.org --- annt's GNU Emacs configuration file -*- lexical-binding: t -*-

;;; Commentary:

;; This file contains my personal configuration

;;; Code:
#+end_src

** preamble

the following macro was yoinked from the [[https://github.com/hlissner/doom-emacs][Doom Emacs]]' source code, all credit
goes to their contributors as i only partially edited them to fit my needs.

| [[https://github.com/doomemacs/doomemacs/blob/8a27eb99bec5a955833b6d23f431c5cc39e91f7f/core/core-lib.el#L506-L549][macro :: after!]] | allows lazy loading packages like the =:defer= keyword in =use-package= |

#+begin_src emacs-lisp
(defmacro after! (package &rest body)
  "Evaluate BODY after PACKAGE have loaded.

PACKAGE is a symbol or list of them. These are package names, not modes,
functions or variables. It can be:

- An unquoted package symbol (the name of a package)
    (after! helm BODY...)
- An unquoted list of package symbols (i.e. BODY is evaluated once both magit
  and git-gutter have loaded)
    (after! (magit git-gutter) BODY...)
- An unquoted, nested list of compound package lists, using any combination of
  :or/:any and :and/:all
    (after! (:or package-a package-b ...)  BODY...)
    (after! (:and package-a package-b ...) BODY...)
    (after! (:and package-a (:or package-b package-c) ...) BODY...)
  Without :or/:any/:and/:all, :and/:all are implied.

This is a wrapper around `eval-after-load' that:

1. Suppresses warnings for disabled packages at compile-time
2. Supports compound package statements (see below)
3. Prevents eager expansion pulling in autoloaded macros all at once"
  (declare (indent defun) (debug t))
  (if (symbolp package)
      (list (if (or (not (bound-and-true-p byte-compile-current-file))
                    (require package nil 'noerror))
                #'progn
              #'with-no-warnings)
            ;; We intentionally avoid `with-eval-after-load' to prevent eager
            ;; macro expansion from pulling (or failing to pull) in autoloaded
            ;; macros/packages.
            `(eval-after-load ',package ',(macroexp-progn body)))
    (let ((p (car package)))
      (cond ((memq p '(:or :any))
             (macroexp-progn
              (cl-loop for next in (cdr package)
                       collect `(after! ,next ,@body))))
            ((memq p '(:and :all))
             (dolist (next (reverse (cdr package)) (car body))
               (setq body `((after! ,next ,@body)))))
            (`(after! (:and ,@package) ,@body))))))
#+end_src

** package management

*** ~straight.el~

| [[https://github.com/raxod502/straight.el][straight]] | purely functional package manager |

a few reasons why i consider =straight.el=:

- functional
- reproducible package management
- packages cloned as /Git/ repos
- ability to provide own recipes
- =package.el= loads every package meanwhile =straight.el= only loads whatever
  is specifically stated on the init file

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent
         'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(after! straight
  (setq straight-repository-branch "master")

  ;; do not fully clone repos, it's just not needed
  (setq straight-vc-git-default-clone-depth 1)

  ;; always prefer native compilation
  (setq straight-disable-compile nil)
  (setq straight-disable-native-compilation nil))
#+end_src

** helpers

| [[https://github.com/noctuid/general.el][general]] | powerful package that offers macros and wrappers for key, advice and hook definitions |

*NOTE*: the following package drastically impacts the commonly used syntax for
defining keys/advices/hooks; as stated, these are macros and wrappers around
the "proper" way of defining those mentioned before. it is adviced to have a
clear understanding of core commands such as =define-key=, =global-set-key=,
etc.  before proceeding to replace them with =package.el=.
please do read at least the =README= file on the package's repository.

the ultimate goal with this package is to avoid the following:

#+begin_src emacs-lisp :tangle no
;; this
(let ((map global-map))
  (dolist (bind (list
                 (kbd "C-SPC")
                 (kbd "C-@")
                 [mouse-2]
                 [mouse-3]))
    (define-key map bind nil)))

;; is equivalent to this
(undef-key!
  :with #'ignore
  "C-SPC"
  "C-@"
  [mouse-2]
  [mouse-3])

;; also this...
(dolist (map (list
              evil-insert-state-map evil-normal-state-map
              evil-replace-state-map evil-visual-state-map))
  (define-key map [mouse-2] 'nil))

;; ... to this
(undef-key! '(evil-insert-state-map
              evil-normal-state-map
              evil-replace-state-map
              evil-visual-state-map)
  :with #'ignore
  [mouse-2])

;; also same...
(dolist (hooks '(haskell-mode-hook haskell-literate-mode-hook))
  (add-hook hooks #'lsp-deferred))

;; ... for hooks
(add-hook! '(haskell-mode-hook haskell-literate-mode-hook) #'lsp-deferred)
#+end_src

as you can see, it's easier to maintain and read...
the shipped defaults are great, there's really not many options as this relies
on function calls rather variables.

for simplicity and consistency the definitions have been aliased, it should be
intuitive.

#+begin_src emacs-lisp
(straight-use-package 'general)

(setq general-implicit-kbd t) ;; auto expand "str" to (kbd "str")

(defalias 'def-key!   #'general-def)
(defalias 'undef-key! #'general-unbind)
(defalias 'add-hook!  #'general-add-hook)
(defalias 'after-gui! #'general-after-gui)

(add-hook 'after-init-hook #'general-auto-unbind-keys)
#+end_src

| [[https://github.com/radian-software/blackout][blackout]] | modeline lighters cleaner |

#+begin_src emacs-lisp
(straight-use-package 'blackout)
#+end_src

** generals

settings that do not belong anywhere specific.

#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t) ;; safer than `rm'
(setq use-short-answers         t)
(setq visible-bell              t) ;; flash screen

;; always autorevert (dynamically refresh buffer contents)
(setq auto-revert-verbose t)
(add-hook 'after-init-hook #'global-auto-revert-mode)

;; performance improvement for really long files
(global-so-long-mode)
#+end_src

*** Emacs server

the following allows enabling an "/Emacs server/" on startup, this allows Emacs
to "share" itself across new instances (those being graphical or via terminal).

/Protesilaos/ provides a video tutorial with practical use cases [[https://youtu.be/BjhcmRMF9qs][here]].

#+begin_src emacs-lisp
(require 'server)
(unless (server-running-p) (add-hook 'after-init-hook #'server-start))
#+end_src

*** indentification

information about myself.

#+begin_src emacs-lisp
(setq user-full-name    "anntnzrb")
(setq user-mail-address "anntnzrb@proton.me")
#+end_src

*** custom custom file

if you adjust settings directly from /Emacs/ (GUI), some Elisp code will be
appended to the =init.el= file, this can be a bit messy; this can be adjusted
to use another file and accomplish this.

#+begin_quote
i've finally decided to just not use a custom file at all; everything should be
handled from this file anyways. i've had issues with my settings whenever i'm
going thru =customize= and accidentally set-up a settings or two.
#+end_quote

#+begin_src emacs-lisp
;; change between `t' and `nil' to enable/disable custom file
(let ((use-custom-file-p nil))
  (setq custom-file
        (if use-custom-file-p
            (expand-file-name "custom.el" user-emacs-directory)
          null-device)))
#+end_src

*** backups

i've never used this functionality in a text editor before, i immediately
disable this feature as it can be annoying, /e.g/ (/Vim/'s swapfiles)...

however, if set properly this can be a catastrophe saver.

#+begin_src emacs-lisp
(setq backup-directory-alist
      `(("." . ,(concat user-emacs-directory "backups/"))))
(setq make-backup-files     t)
(setq backup-by-copying     t)
(setq version-control       t)
(setq delete-old-versions   t)
(setq kept-new-versions     8)
(setq kept-old-versions     2)
(setq create-lockfiles    nil)
#+end_src

*** editing

#+begin_src emacs-lisp
(setq mode-require-final-newline         t)
(setq-default tab-width                  4)
(setq-default indent-tabs-mode         nil)
(setq-default show-trailing-whitespace   t)
(setq-default fill-column               79)

;; line numbers
(defun annt--line-numbers-setup ()
  "Sets up `display-line-numbers' and `display-fill-column-indicator'"
  (setq display-line-numbers 'relative)
  (setq display-fill-column-indicator-column (+ fill-column 1)))

(add-hook! '(prog-mode-hook text-mode-hook) #'annt--line-numbers-setup)

;; display vertical column at line limit
(global-display-fill-column-indicator-mode)
(global-hl-line-mode) ;; line highlighting

(add-hook! '(prog-mode-hook text-mode-hook) #'auto-fill-mode)
(blackout 'auto-fill-mode) ;; disable "Fill" lighter

;; delete trailing whitespaces prior saving
(add-hook 'before-save-hook #'whitespace-cleanup)
#+end_src

*** Vi emulation

my journey on /*nix/ environments began with /[neo]Vi[m]/, it's difficult for
me not to seek for /Vi/ emulation everywhere.

| [[https://github.com/emacs-evil/evil][evil]] | extensible vi layer |

#+begin_src emacs-lisp
(straight-use-package 'evil)

(setq evil-want-keybinding nil)
(setq evil-undo-system     'undo-redo)

(after! evil
  (undef-key! '(evil-insert-state-map
                evil-normal-state-map
                evil-replace-state-map
                evil-visual-state-map)
    :with #'ignore
    [mouse-2])

  (def-key! evil-motion-state-map [down-mouse-1] #'ignore)
  (def-key! evil-insert-state-map "C-g"          #'evil-normal-state))

(evil-mode) ;; evil is used everywhere
#+end_src

| [[https://github.com/emacs-evil/evil-collection][evil-collection]] | collection of /Vi/ keybinds for some parts of /Emacs/ which are dealt incorrectly by evil |

#+begin_src emacs-lisp
(after! evil
  (straight-use-package 'evil-collection)

  (setq evil-collection-want-unimpaired-p nil)
  ;; emtpy the list of available modes and enable individually; no surprises
  (setq evil-collection-mode-list nil)
  (evil-collection-init '(help)))
#+end_src

| [[https://github.com/emacs-evil/evil-surround][evil-surround]] | [[https://github.com/tpope/vim-surround][vim-surround]] emulation |

#+begin_src emacs-lisp
(after! evil
  (straight-use-package 'evil-surround)
  (global-evil-surround-mode))
#+end_src

*** mouse & cursor

mouse & mouse wheel behaviour.

+ don't copy region to kill-ring upon selection
+ hide mouse pointer when typing
+ remove mouse wheel acceleration
+ keep mouse pointer at the same visual position

mouse wheel behaviour:

+ scroll =1= line be default
+ holding =meta= scrolls half a screen
+ holding =control= adjusts the size of text (GNU Emacs =27+=)

#+begin_src emacs-lisp
(setq make-pointer-invisible          t)
(setq mouse-drag-copy-region        nil)
(setq mouse-wheel-follow-mouse      nil)
(setq mouse-wheel-progressive-speed nil)
(setq scroll-preserve-screen-position t)

(setq mouse-wheel-scroll-amount
      '(1
        ((meta) . 0.5)
        ((control) . text-scale)))
#+end_src

**** cursor

#+begin_src emacs-lisp
(setq blink-cursor-blinks     0) ;; blink forever
(setq blink-cursor-delay    0.2)
(setq blink-cursor-interval 0.3)

;; hourglass cursor
(setq display-hourglass t)
(setq hourglass-delay   0) ;; display hourglass immediately

;; save cursor position
(save-place-mode)
(setq save-place-file (expand-file-name "backups/places" user-emacs-directory))
(setq save-place-forget-unreadable-files t)

;; settings for TTY Emacs
(unless (display-graphic-p)
  (setq visible-cursor nil))
#+end_src

*** binds

place where general binds go, the rest should be on its respective section
under its respective =mode-map=-ing.

#+begin_src emacs-lisp
;; some defaults i dislike from the global map
(undef-key!
  :with #'ignore
  "C-SPC"
  "C-@"
  [mouse-2]
  [mouse-3])
#+end_src

** appearance

*** fonts

#+begin_src emacs-lisp
(after-gui!
  (let ((font-size 12))

    ;; default
    (set-face-attribute 'default nil
                        :font (format "Iosevka-%s" font-size))
    ;; code
    (set-face-attribute 'fixed-pitch nil
                        :font (format "FantasqueSansMono-%s" font-size))))
#+end_src

*** themes

| [[https://gitlab.com/protesilaos/modus-themes/][modus-themes]] | pair of highly accessible themes that conform with the WCAG AAA standard for colour contrast between background and foreground combinations |

#+begin_src emacs-lisp
(after-gui!
  (straight-use-package 'modus-themes)

  (setq modus-themes-slanted-constructs t)
  (setq modus-themes-bold-constructs    t)

  ;; modeline
  (setq modus-themes-subtle-line-numbers t)

  ;; org
  (setq modus-themes-org-blocks 'grayscale)

  (modus-themes-load-themes)

  (let ((time (string-to-number (format-time-string "%H"))))
    (if (and (> time 8) (< time 18))
        (modus-themes-load-operandi)
      (modus-themes-load-vivendi)))

  (def-key! "M-<f5>" #'modus-themes-toggle))

(unless (display-graphic-p)
  (message "No theme loaded :: Not running from a graphical display."))
#+end_src

| [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] | collection of various icon fonts |

#+begin_src emacs-lisp
(after-gui!
  (straight-use-package 'all-the-icons)

  (defun annt--all-the-icons-setup ()
    "Checks if `all-the-icons' fonts are downloaded, gets them if not."
    (unless (file-exists-p (expand-file-name
                            "~/.local/share/fonts/all-the-icons.ttf"))
      (all-the-icons-install-fonts t)))

  ;; install all-the-icons on boot only if missing
  (add-hook 'after-init-hook #'annt--all-the-icons-setup))
#+end_src

*** dashboard

#+begin_src emacs-lisp
(straight-use-package 'dashboard)

(dashboard-setup-startup-hook) ;; enable dashboard `after-init-hook'

(after! dashboard
  (setq dashboard-set-heading-icons  t)
  (setq dashboard-show-shortcuts     t)
  (setq dashboard-center-content     t)
  (setq dashboard-set-file-icons     t)
  (setq dashboard-set-init-info      t)
  (setq dashboard-set-footer         t)
  (setq dashboard-startup-banner 'logo)

  (setq dashboard-banner-logo-title "Behold; GNU/Emacs")

  (setq dashboard-items '((recents   . 5)
                          (bookmarks . 5)
                          (agenda    . 5)))

  (undef-key! dashboard-mode-map
    :with #'ignore
    [remap quit-window])

  (defun annt--dashboard-as-initial-buffer ()
    "Sets the initial buffer to dashboard."
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))

  (add-hook! 'dashboard-mode-hook #'annt--dashboard-as-initial-buffer))
#+end_src

*** modeline

#+begin_src emacs-lisp
;; clock
(setq display-time-format      "%a @ %H:%M")
(setq display-time-interval              50) ;; update faster to catch up
(setq display-time-default-load-average nil)

(add-hook 'after-init-hook #'display-time-mode)

(setq column-number-mode   t)
(setq size-indication-mode t)
(setq column-number-indicator-zero-based nil)
#+end_src

**** keycast

| [[https://github.com/tarsius/keycast][keycast]] | shows current key and its command in the mode line |

even though this is commonly used for screencasts (which i don't do), it looks
great and helps me identifying some muscle memory keys i usually press without
notice.

#+begin_src emacs-lisp
(straight-use-package 'keycast)

(after! keycast
  (setq keycast-mode-line-format "%k%c%r")
  (setq keycast-tab-bar-format   "%k%c%r")

  ;; don't hide rest of the modeline
  (setq keycast-mode-line-remove-tail-elements nil)

  ;; disable logging when actually typing stuff
  (dolist (ev '(self-insert-command
                org-self-insert-command))
    (add-to-list 'keycast-substitute-alist `(,ev "..." "Typing…")))

  ;; list of events to ignore
  (dolist (ev '(ignore
                mouse-event-p
                mouse-movement-p
                mwheel-scroll
                lsp-ui-doc--handle-mouse-movement))
    (add-to-list 'keycast-substitute-alist `(,ev nil))))

(add-hook 'after-init-hook #'keycast-mode)
#+end_src

*** tooltips

- GTK-tooltips disabled for consistency

#+begin_src emacs-lisp
(setq tooltip-short-delay         1)
(setq x-gtk-use-system-tooltips nil)
(setq tooltip-frame-parameters
      '((border-width          . 0)
        (internal-border-width . 4)))
#+end_src

* dired

/Emacs/' =dir=-ectory =ed=-itor.

#+begin_src emacs-lisp
(after! dired
  (setq dired-auto-revert-buffer       #'dired-directory-changed-p)
  (setq dired-listing-switches   "-AFhl --group-directories-first")
  (setq dired-recursive-copies                             'always)
  (setq dired-recursive-deletes                            'always)

  ;; disable some defaults
  (undef-key! dired-mode-map
    :with #'ignore
    [mouse-1]
    [mouse-2]
    [normal-state mouse-2])

  (def-key! dired-mode-map
    [mouse-3] #'dired-mouse-find-file
    [mouse-8] #'dired-up-directory)

  (evil-collection-init 'dired) ;; vi binds

  ;; less verbose output
  (add-hook 'dired-mode-hook #'dired-hide-details-mode))
#+end_src

| [[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]] | self-explanatory |

only enable /dired/ icons when using graphical /Emacs/.

#+begin_src emacs-lisp
(after-gui!
  (after! dired
    (straight-use-package 'all-the-icons-dired)
    (add-hook 'dired-mode-hook #'all-the-icons-dired-mode))

  (after! all-the-icons-dired (blackout 'all-the-icons-dired-mode)))
#+end_src

* programming

** keybinds

set of keyboard binding for programming modes

#+begin_src emacs-lisp
(after! prog-mode
  (def-key! prog-mode-map
    :prefix "C-c"
    "c" #'compile
    "r" #'recompile))
#+end_src

** tools

| [[https://github.com/Malabarba/aggressive-indent-mode][aggressive-indent-mode]] | keeps your code nicely aligned when all you do is type |

#+begin_src emacs-lisp
(straight-use-package 'aggressive-indent)

(after! aggressive-indent
  (setq aggressive-indent-comments-too   t)
  (setq aggressive-indent-sit-for-time 0.5)

  (def-key! aggressive-indent-mode-map
    [remap aggressive-indent-indent-defun] #'aggressive-indent-indent-region-and-on))
#+end_src

| [[https://github.com/emacs-lsp/lsp-mode/][lsp-mode]] | Emacs client/library for the /Language Server Protocol (LSP)/. |

#+begin_src emacs-lisp
(after! prog-mode
  (straight-use-package 'lsp-mode)

  (setq lsp-keymap-prefix          "C-c l")
  (setq lsp-lens-enable                  t)
  (setq lsp-modeline-diagnostics-enable  t)
  (setq lsp-headerline-breadcrumb-enable t))
#+end_src

** shell

settings for shell scripts.

#+begin_src emacs-lisp
(after! sh-script
  (setq sh-backlash-align t)
  (setq sh-basic-offset   4)

  ;; indentation
  (setq sh-indent-for-case-alt      '+)
  (setq sh-indent-for-case-label     0)
  (setq sh-indent-after-continuation t)

  ;; Flycheck
  (add-hook 'sh-mode-hook #'flycheck-mode))
#+end_src

** Makefile

=Makefile= files should follow the [[https://www.gnu.org/software/make/manual/html_node/Makefile-Conventions.html][GNU Makefile conventions]].

#+begin_src emacs-lisp
(after! make-mode
  (setq makefile-backslash-align               t)
  (setq makefile-tab-after-target-colon        t)
  (setq makefile-use-curly-braces-for-macros-p t)

  ;; indentation
  (setq indent-tabs-mode t) ;; use tabs over spaces
  (setq tab-width        4))
#+end_src

** C-like

languages that are syntactically similar to /C/

*** C

settings and style for the /C/ language.

#+begin_src emacs-lisp
(after! cc-mode
  ;; OpenBSD KNF-style inherited from Kernighan & Ritchie
  (setq c-auto-align-backslashes                t)
  (setq c-backslash-max-column        fill-column)
  (setq c-basic-offset                          4)
  (setq c-electric-flag                         t)
  (setq c-mark-wrong-style-of-comment           t)
  (setq c-max-one-liner-length        fill-column)
  (setq c-tab-always-indent                     t)

  ;; offsets
  (setq c-strict-syntax-p t) ;; we're serious in here
  (setq c-offsets-alist
        '((c                    . c-lineup-C-comments)
          (block-close          . 0)
          (block-open           . 0)
          (case-label           . 0)
          (defun-block-intro    . +)
          (defun-close          . 0)
          (defun-open           . 0)
          (do-while-closure     . 0)
          (else-clause          . 0)
          (statement            . 0)
          (statement-case-intro . +)
          (statement-case-open  . +)))

  ;; braces
  (setq c-hanging-braces-alist
        '((defun-open  before after)
          (defun-close before after)))

  ;; Flycheck
  (add-hook 'c-mode-hook #'flycheck-mode)

  ;; LSP :: Clangd
  (setq lsp-clients-clangd-args
        '("--header-insertion-decorators=0"
          "--clang-tidy"))
  (add-hook 'c-mode-hook #'lsp-deferred))
#+end_src

** Lispy

*** Emacs Lisp (Elisp)

#+begin_src emacs-lisp
(after! elisp-mode
  (electric-pair-mode)
  (setq checkdoc-verb-check-experimental-flag nil)

  ;; Flycheck
  (setq flycheck-emacs-lisp-load-path 'inherit)

  (add-hook! 'emacs-lisp-mode-hook (list
                                    #'aggressive-indent-mode
                                    #'flycheck-mode)))
#+end_src

*** Racket

#+begin_src emacs-lisp
(defun annt--racket-mode-setup ()
  "Sets up mode for Racket."
  (when (executable-find "racket")
    (straight-use-package 'racket-mode)

    (after! racket-mode
      (add-hook! 'racket-mode-hook (list
                                    #'aggressive-indent-mode
                                    #'flycheck-mode)))
    (racket-mode)))

(add-to-list 'auto-mode-alist '("\\.rkt[dl]?\\'" . annt--racket-mode-setup))
#+end_src

*** Fennel

#+begin_src emacs-lisp
(defun annt--fennel-mode-setup ()
  "Sets up mode for Fennel."
  (when (executable-find "lua")
    (straight-use-package 'fennel-mode)

    ;; detect Fennel files by extension
    (after! fennel-mode
      (add-hook 'fennel-mode-hook #'aggressive-indent-mode))
    (fennel-mode)))

(add-to-list 'auto-mode-alist '("\\.fnl\\'" . annt--fennel-mode-setup))
#+end_src

** Nix

#+begin_src emacs-lisp
(defun annt--nix-mode-setup ()
  "Sets up mode for Nix."
  (when (executable-find "nix")
    (straight-use-package 'nix-mode)

    (after! nix-mode
      (add-hook! 'nix-mode-hook (list #'lsp-deferred
                                      #'aggressive-indent-mode)))
    (nix-mode)))

(add-to-list 'auto-mode-alist '("\\.nix\\'" . annt--nix-mode-setup))
#+end_src

** Haskell

#+begin_src emacs-lisp
(defun annt--haskell-mode-setup ()
  "Sets up mode for Haskell."
  (when (executable-find "ghc")
    (straight-use-package 'haskell-mode)

    (after! (haskell-mode lsp-mode)
      (straight-use-package 'hindent)

      ;; Flycheck
      (add-hook 'haskell-mode-hook #'flycheck-mode)

      ;; LSP for Haskell's modes
      ;; `lsp-haskell' is needed as an extra to `lsp-mode'
      (straight-use-package 'lsp-haskell)

      (add-hook! '(haskell-mode-hook haskell-literate-mode-hook) #'lsp-deferred)

      ;; format before saving
      (add-hook 'before-save-hook #'hindent-reformat-buffer))
    (haskell-mode)))

(add-to-list 'auto-mode-alist '("\\.hs\\'" . annt--haskell-mode-setup))
#+end_src

** Lua

| [[https://github.com/immerrr/lua-mode][lua-mode]] | /Lua/ support for Emacs |

#+begin_src emacs-lisp
(defun annt--lua-mode-hook ()
  "Sets up mode for Lua."
  (straight-use-package 'lua-mode)

  (after! lua-mode
    (setq lua-indent-level 2))

  (add-hook! 'lua-mode-hook (list #'lsp-deferred
                                  #'aggressive-indent-mode))
  (lua-mode))

(add-to-list 'auto-mode-alist '("\\.lua\\'" . annt--haskell-mode-setup))
#+end_src

** YAML

| [[https://github.com/yoshiki/yaml-mode][yaml-mode]] | support for =.yml= files which are not natively supported |

#+begin_src emacs-lisp
(defun annt--yaml-mode-setup ()
  "Sets up mode for YAML."
  (straight-use-package 'yaml-mode)

  (after! yaml-mode
    (setq yaml-indent-offset 2))
  (yaml-mode))

(add-to-list 'auto-mode-alist '("\\.ya?ml\\'" . annt--yaml-mode-setup))
#+end_src

** HTML

#+begin_src emacs-lisp
(unless (executable-find "npm")
  (message "HTML :: npm not installed, cannot install LSP"))

(after! sgml-mode
  (add-hook! 'sgml-mode-hook (list #'sgml-electric-tag-pair-mode
                                   #'aggressive-indent-mode))
  ;; LSP
  (add-hook 'sgml-mode-hook #'lsp-deferred))
#+end_src

* version control

the following is configured according to the [[https://cbea.ms/git-commit/][How to Write a Git Commit Message]]
guide.

in short, the /7 rules/ summarized:

#+begin_quote
1. Separate subject from body with a blank line
2. Limit the subject line to 50 characters
3. Capitalize the subject line
4. Do not end the subject line with a period
5. Use the imperative mood in the subject line
6. Wrap the body at 72 characters
7. Use the body to explain what and why vs. how
#+end_quote

#+begin_src emacs-lisp
(after! git-commit
  (setq git-commit-style-convention-checks '(non-empty-second-line
                                             overlong-summary-line)))
;; fill-column
(defun annt--set-git-fill-column ()
  "Updates the value of fill-column for git commit messages."
  (setq-local fill-column 72)
  (setq-local display-fill-column-indicator-column (+ fill-column 1)))

(setq git-commit-summary-max-length 50)
(add-hook 'git-commit-mode-hook #'annt--set-git-fill-column)
#+end_src

| [[https://github.com/magit/magit][magit]] | complete text-based user interface to [[https://git-scm.com/][Git]] |

#+begin_src emacs-lisp
(straight-use-package 'magit)

(def-key! :prefix "C-c" "g" #'magit-status)

(after! magit
  ;; vi binds
  (evil-collection-init 'magit))
#+end_src

* applications & utilities

| [[https://github.com/justbur/emacs-which-key][which-key]] | displays available keybindings in popup |

#+begin_src emacs-lisp
(straight-use-package 'which-key)

;; disable lighter on mode-line
(setq which-key-lighter                            nil)
(setq which-key-idle-delay                         0.5)
(setq which-key-max-display-columns                nil)
(setq which-key-paging-key                    "<next>")
(setq which-key-sort-order #'which-key-key-order-alpha)

;; init after set-up
(which-key-mode)
#+end_src

| [[https://github.com/Wilfred/helpful][helpful]] | better Emacs *help* buffer |

#+begin_src emacs-lisp
(straight-use-package 'helpful)

(def-key!
  [remap      describe-key] #'helpful-key
  [remap   describe-symbol] #'helpful-symbol
  [remap  describe-command] #'helpful-command
  [remap describe-function] #'helpful-function
  [remap describe-variable] #'helpful-variable)

(after! helpful
  ;; vi binds
  (evil-collection-init 'helpful))
#+end_src

| [[https://github.com/tarsius/hl-todo][hl-todo]] | TODO/FIXME/etc keyword highlighting in comments and strings |

#+begin_src emacs-lisp
(straight-use-package 'hl-todo)

(add-hook! '(prog-mode-hook text-mode-hook) #'hl-todo-mode)
#+end_src

| [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] | mode which highlights delimiters such as parentheses, brackets or braces according to their depth |

#+begin_src emacs-lisp
(straight-use-package 'rainbow-delimiters)

(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+end_src

| [[https://github.com/malabarba/beacon][beacon]] | a flashing light that follows your cursor around so you don't lose it |

#+begin_src emacs-lisp
(straight-use-package 'beacon)

(beacon-mode)

(after! beacon
  (setq beacon-lighter         nil)
  (setq beacon-size    fill-column)
  (setq beacon-blink-delay     0.5)
  (setq beacon-blink-duration  0.5))
#+end_src

** completion

| Abbreviations (Abbrevs) | built-in library for text abbreviations |

#+begin_src emacs-lisp
(after! abbrev
  (setq only-global-abbrevs         nil)
  (setq abbrev-all-caps               t)
  (setq abbrev-suggest                t)
  (setq save-abbrevs          'silently)
  (setq abbrev-suggest-hint-threshold 3)
  (setq abbrev-file-name (expand-file-name "abbrevs" user-emacs-directory))

  ;; text-mode abbrevs
  (let ((table text-mode-abbrev-table))
    (define-abbrev table "mymail" user-mail-address)
    (define-abbrev table "latex" "LaTeX")
    (define-abbrev table "html"  "HTML")
    (define-abbrev table "ghub"  "GitHub")
    (define-abbrev table "glab"  "GitLab")
    (define-abbrev table "yt"    "YouTube"))

  ;; binds
  (def-key! ctl-x-map
    "a e" #'expand-abbrev
    "a u" #'unexpand-abbrev)

;; disable "Abbrev" lighter
(blackout 'abbrev-mode))

(add-hook 'text-mode-hook #'abbrev-mode)
#+end_src

| [[https://github.com/oantolin/orderless][orderless]] | completion style that is /order-less/ |

#+begin_src emacs-lisp
(straight-use-package 'orderless)

(setq completion-styles '(orderless))
#+end_src

| [[https://github.com/minad/vertico][vertico]] | minimalistic completion UI, uses /Emacs/' own completion engine in contrast to other tools like [[https://github.com/abo-abo/swiper][ivy]] and [[https://github.com/emacs-helm/helm][helm]] |

#+begin_src emacs-lisp
(straight-use-package 'vertico)

(vertico-mode)

(after! vertico
  (def-key! vertico-map
    "C-j" #'vertico-next
    "C-k" #'vertico-previous))
#+end_src

| [[https://github.com/minad/marginalia][marginalia]] | annotations in the minibuffer |

#+begin_src emacs-lisp
(after! vertico
  (straight-use-package 'marginalia)

  (marginalia-mode))
#+end_src

| [[https://github.com/company-mode/company-mode][company]] | text completion completion framework |

#+begin_src emacs-lisp
(straight-use-package 'company)

(add-hook 'prog-mode-hook #'company-mode)

(after! company
  (setq company-lighter-base  "Company")
  (setq company-idle-delay          0.3)
  (setq company-show-numbers          t)
  (setq company-minimum-prefix-length 2))
#+end_src

*** syntax checking

| [[https://github.com/flycheck/flycheck][flycheck]] | modern on-the-fly syntax checking |

#+begin_src emacs-lisp
(straight-use-package 'flycheck)

(after! flycheck
  (setq flycheck-mode-line-prefix                "FlyCheck")
  (setq flycheck-display-errors-delay                   0.3)
  (setq flycheck-idle-change-delay                      0.7)
  (setq flycheck-buffer-switch-check-intermediate-buffers t))
#+end_src

*** snippets

#+begin_src emacs-lisp
(straight-use-package 'yasnippet)

(after! yasnippet
  (def-key! yas-minor-mode-map "C-<tab>" #'yas-expand)
  (yas-reload-all)
  ;; disable "yas" lighter
  (blackout 'yas-minor-mode))

(add-hook! '(prog-mode-hook text-mode-hook) #'yas-minor-mode)
#+end_src

** spelling

very basic spell-checking system for now, as i find somewhat quite difficult to
manage multiple dictionaries. also still studying the different backend
alternatives, those being =aspell=, =hunspell= & =enchant=.

#+begin_src emacs-lisp
(after! ispell
  (let ((backend "aspell"))
    (if (executable-find backend)
        (setq ispell-program-name backend)
      (annt--notify-and-log
       "Dictionary backend not found; spell checking disabled.")))

  ;; dictionaries
  (let ((dicts "en_GB"))
    (setq ispell-dictionary dicts)
    (setq ispell-local-dictionary dicts))

  (setq ispell-check-comments  t)
  (setq ispell-help-in-bufferp t)
  (setq ispell-extra-args '("--sug-mode=ultra"
                            "--run-together")))
#+end_src

*** FlySpell

/on-the-fly spell checking/; this minor mode allows highlighting incorrect
words.

#+begin_src emacs-lisp
(after! flyspell
  (setq flyspell-issue-welcome-flag nil)
  (setq flyspell-issue-message-flag nil)

  (def-key! "M-\"" #'flyspell-buffer))

(add-hook 'text-mode-hook #'flyspell-mode)
#+end_src

** bookmarks

#+begin_src emacs-lisp
(after! bookmark
  (setq bookmark-save-flag             nil)
  (setq bookmark-sort-flag               t)
  (setq bookmark-menu-length   fill-column)
  (setq bookmark-search-delay          0.5)
  (setq bookmark-use-annotations       nil)
  (setq bookmark-set-fringe-mark         t)
  (setq bookmark-version-control       nil)
  (setq bookmark-watch-bookmark-file   nil)
  (setq bookmark-menu-confirm-deletion   t)
  (setq bookmark-completion-ignore-case  t)

  (setq bookmark-default-file (expand-file-name "bookmarks" user-emacs-directory)))
#+end_src

the following snippet of code gets tangled into the =bookmarks= file, there's
no need to directly edit it; modify it below instead.

#+begin_src emacs-lisp :tangle "bookmarks"
;; Emacs Bookmarks --- -*- coding: utf-8-emacs; mode: lisp-data -*-
;; -*- End Of Bookmark File Format Version Stamp -*-

(
 (""
  (filename . "~/"))
 ("emacs/"
  (filename . "~/.config/emacs/"))

 ("shell/"
  (filename . "~/.config/shell/"))
 )
#+end_src

** org

one of /Emacs/' killer features.

#+begin_src emacs-lisp
(after! org
  (setq org-edit-src-content-indentation 0)
  (setq org-startup-folded               t)
  (setq org-confirm-babel-evaluate     nil)

  ;; list of available exports
  (setq org-export-backends '(ascii
                              beamer
                              groff
                              html
                              latex
                              man
                              md
                              odt
                              org
                              texinfo))

  (add-hook 'org-mode-hook #'org-indent-mode))

;; disable "Ind" lighter
(after! org-indent (blackout 'org-indent-mode))

;; org-babel
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (shell      . t)))
#+end_src

| [[https://github.com/snosov1/toc-org][toc-org]] | utility to have an up-to-date table of contents on ~Org~ and ~Markdown~ |

#+begin_src emacs-lisp
(after! org
  (straight-use-package 'toc-org)

  (setq toc-org-hrefify-default "gh")

  (add-hook 'org-mode-hook #'toc-org-mode))
#+end_src

| [[https://github.com/takaxp/org-tree-slide][org-tree-slide]] | allows creating presentations with /Org-Mode/ |

- references
  - [[https://youtu.be/vz9aLmxYJB0][Emacs Tips - How to Give Presentations with Org Mode]]

#+begin_src emacs-lisp
(after! org
  (straight-use-package 'org-tree-slide)

  (defun annt--org-present-start ()
    "Configurations settings for entering presentation mode."
    (interactive "P")
    ;; save current settings
    (setq-local display-line-numbers-orig display-line-numbers)

    ;; set new values
    (setq-local text-scale-mode-amount 3)
    (setq-local display-line-numbers nil)
    (org-display-inline-images) ;; enable images for org
    (display-fill-column-indicator-mode 0)
    (text-scale-set text-scale-mode-amount))

  (defun annt--org-present-end ()
    "Configurations settings for exiting presentation mode, reverting changes
mostly."
    (interactive "P")
    ;; restore settings
    (setq-local text-scale-mode-amount 0)
    (setq display-line-numbers display-line-numbers-orig)
    (text-scale-set text-scale-mode-amount)
    (display-fill-column-indicator-mode))

  (setq org-tree-slide-activate-message    "Presentation ON")
  (setq org-tree-slide-deactivate-message "Presentation OFF")
  (setq org-image-actual-width nil)

  ;; keybinds
  (def-key! org-mode-map :prefix "C-c" "<f9>" #'org-tree-slide-mode)

  (add-hook 'org-tree-slide-play-hook #'annt--org-present-start)
  (add-hook 'org-tree-slide-stop-hook   #'annt--org-present-end))
#+end_src
