#!/bin/sh

# pkg-installer --- Package installer (general use)

# *****************************************************************************
# Modify these variables as per requirements.
#
# aur_helper: Preferred AUR helper. Example: paru, yay etc.
# pkgs_file : The csv file containing the list of AUR and cargo packages.
#             The csv file should be of format : <A or C>,<package_name>
#             where A stands AUR packages, and C for cargo packages.
#             Example:
#             # pacman packages
#             # aur packages
#             A,spotify
#             A,extra/zsh
#             A,aur/rtx-bin
#             # cargo packages
#             C,rust-analyzer
# *****************************************************************************

aur_helper='paru'
pkgs_file='pkgs.csv'

# *****************************************************************************

installedp() {
    test -x "$(command -v "${1}")"
}

err() {
    printf '%s\n' "${@}" >&2
}

check_requirements() {
    for cmd in pacman paru cargo; do
        ! installedp "${cmd}" && err "Error: This script requires ${cmd} but it is not installed. Exiting..." && exit 1
    done
}


parse_pkgs() {
    aur_pkgs_file=$(mktemp)
    cargo_pkgs_file=$(mktemp)

    tmp_prog_file=$(mktemp)
    # trim comments and empty lines
    sed '/^#/d ; /^$/d' < "${pkgs_file}" > "${tmp_prog_file}"

    while IFS=',' read -r pkgs_type pkgs_name
    do
        case "${pkgs_type}" in
            A) printf "%s " "${pkgs_name}" >> "${aur_pkgs_file}" ;;
            C) printf "%s " "${pkgs_name}" >> "${cargo_pkgs_file}" ;;
            *) printf "Unknown pkgs type for pkgs: %s. Skipping...\n" "${pkgs_name}" ;;
        esac
    done < "${tmp_prog_file}"

    install_pkgs "${aur_pkgs_file}" "${cargo_pkgs_file}"
    rm -f "${tmp_prog_file}" "${aur_pkgs_file}" "${cargo_pkgs_file}" 
}

install_pkgs() {
    aur_pkgs_file="${1}"
    cargo_pkgs_file="${2}"
    common_flags="-S --noconfirm --needed"

    test -s "${aur_pkgs_file}"   && "${aur_helper}" ${common_flags} $(cat "${aur_pkgs_file}")
    test -s "${cargo_pkgs_file}" && \
        RUSTC_WRAPPER='sccache' cargo binstall --no-confirm --locked $(cat "${cargo_pkgs_file}")
}

# *****************************************************************************

check_requirements
parse_pkgs

exit 0
